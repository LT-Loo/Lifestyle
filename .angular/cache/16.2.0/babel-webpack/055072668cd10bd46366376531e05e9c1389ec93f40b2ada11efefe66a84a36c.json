{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/lerth/Documents/Lifestyle/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { LOCALE_ID } from '@angular/core';\nimport { CalendarComponent } from 'ionic2-calendar';\nimport { EventPage } from '../event/event.page';\nimport { formatDate } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"../storage.service\";\nimport * as i3 from \"@angular/forms\";\nexport let CalendarPage = /*#__PURE__*/(() => {\n  var _class;\n  class CalendarPage {\n    // Localise the calendar in local language\n    constructor(modalController, alertController, storageServe, locale) {\n      this.modalController = modalController;\n      this.alertController = alertController;\n      this.storageServe = storageServe;\n      this.locale = locale;\n      this.eventSource = []; // Event displayed in calendar\n      this.calendar = {\n        mode: 'month',\n        currentDate: new Date()\n      };\n    }\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.eventSource = yield _this.storageServe.accessStorage(\"events\");\n      })();\n    }\n    next() {\n      this.myCal.slideNext();\n    } //Next calendar slide\n    back() {\n      this.myCal.slidePrev();\n    } //Previous calendar slide\n    onViewTitleChanged(title) {\n      this.viewTitle = title;\n    } //Change view title\n    //Show event's details when calendar event is clicked\n    onEventSelected(event) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        let start = formatDate(event.startTime, 'dd MMM YYYY', _this2.locale);\n        let end = formatDate(event.endTime, 'dd MMM YYYY', _this2.locale);\n        let dateInfo;\n        // Determine information to show when event is clicked\n        if (event.allDay) {\n          if (start == end) {\n            dateInfo = 'Date: ' + start;\n          } else {\n            dateInfo = 'From: ' + start + '<br>To: ' + end;\n          }\n        } else {\n          let startT = formatDate(event.start, 'hh:mm a', _this2.locale);\n          let endT = formatDate(event.end, 'hh:mm a', _this2.locale);\n          dateInfo = 'Date: ' + start + '<br>From: ' + startT + \"  To: \" + endT;\n        }\n        // Show information when event is clicked\n        const alert = yield _this2.alertController.create({\n          header: event.title,\n          subHeader: event.desc,\n          message: dateInfo,\n          buttons: [{\n            text: 'DELETE',\n            handler: () => {\n              let i = _this2.eventSource.indexOf(event);\n              _this2.eventSource.splice(i, 1);\n              _this2.myCal.loadEvents();\n              _this2.storageServe.saveData(\"events\", _this2.eventSource);\n            }\n          }, 'OK']\n        });\n        alert.present();\n      })();\n    }\n    // Modal page to add event to calendar\n    addEvent() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const modal = yield _this3.modalController.create({\n          component: EventPage,\n          backdropDismiss: false\n        });\n        yield modal.present();\n        modal.onDidDismiss().then(result => {\n          if (result.data && result.data.event) {\n            let event = result.data.event;\n            if (event.allDay) {\n              // If event is all day long\n              let start = event.startTime;\n              event.startTime = new Date(start);\n              let end = event.endTime;\n              event.endTime = new Date(end);\n            } else {\n              // If event isn't all day long, combine both date and time into one data\n              let startY = new Date(event.startTime).getFullYear();\n              let startM = new Date(event.startTime).getMonth() + 1;\n              let startD = new Date(event.startTime).getDate();\n              let startH = new Date(event.start).getHours();\n              let startMin = new Date(event.start).getMinutes();\n              let start = startY + ' ' + startM + ' ' + startD + ' ' + startH + ':' + startMin;\n              event.startTime = new Date(start); // Start time\n              let endY = new Date(event.endTime).getFullYear();\n              let endM = new Date(event.endTime).getMonth() + 1;\n              let endD = new Date(event.endTime).getDate();\n              let endH = new Date(event.end).getHours();\n              let endMin = new Date(event.end).getMinutes();\n              let end = endY + ' ' + endM + ' ' + endD + ' ' + endH + ':' + endMin;\n              event.endTime = new Date(end); // End time\n            }\n\n            _this3.eventSource.push(result.data.event);\n            _this3.myCal.loadEvents();\n            _this3.storageServe.saveData(\"events\", _this3.eventSource); // Update events in storage\n          }\n        });\n      })();\n    }\n  }\n  _class = CalendarPage;\n  _class.ɵfac = function CalendarPage_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i1.AlertController), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(LOCALE_ID));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-calendar\"]],\n    viewQuery: function CalendarPage_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CalendarComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myCal = _t.first);\n      }\n    },\n    decls: 33,\n    vars: 7,\n    consts: [[3, \"translucent\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [3, \"ngModel\", \"ngModelChange\"], [\"value\", \"month\"], [\"value\", \"week\"], [\"value\", \"day\"], [\"size\", \"2\"], [\"fill\", \"clear\", 3, \"click\"], [\"name\", \"arrow-back\", \"slot\", \"icon-only\"], [\"size\", \"8\", 1, \"ion-text-center\"], [\"name\", \"arrow-forward\", \"slot\", \"icon-only\"], [3, \"eventSource\", \"calendarMode\", \"currentDate\", \"onEventSelected\", \"onTitleChanged\"], [\"vertical\", \"bottom\", \"horizontal\", \"end\", \"slot\", \"fixed\"], [\"size\", \"small\", 3, \"click\"], [\"name\", \"add\"]],\n    template: function CalendarPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-title\");\n        i0.ɵɵtext(3, \"Calendar\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"ion-content\", 1)(5, \"ion-header\", 2)(6, \"ion-toolbar\")(7, \"ion-title\", 3);\n        i0.ɵɵtext(8, \"Calendar\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"ion-segment\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function CalendarPage_Template_ion_segment_ngModelChange_9_listener($event) {\n          return ctx.calendar.mode = $event;\n        });\n        i0.ɵɵelementStart(10, \"ion-segment-button\", 5)(11, \"ion-label\");\n        i0.ɵɵtext(12, \"Month\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"ion-segment-button\", 6)(14, \"ion-label\");\n        i0.ɵɵtext(15, \"Week\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"ion-segment-button\", 7)(17, \"ion-label\");\n        i0.ɵɵtext(18, \"Day\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"ion-row\")(20, \"ion-col\", 8)(21, \"ion-button\", 9);\n        i0.ɵɵlistener(\"click\", function CalendarPage_Template_ion_button_click_21_listener() {\n          return ctx.back();\n        });\n        i0.ɵɵelement(22, \"ion-icon\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"ion-col\", 11)(24, \"h3\");\n        i0.ɵɵtext(25);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"ion-col\", 8)(27, \"ion-button\", 9);\n        i0.ɵɵlistener(\"click\", function CalendarPage_Template_ion_button_click_27_listener() {\n          return ctx.next();\n        });\n        i0.ɵɵelement(28, \"ion-icon\", 12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(29, \"calendar\", 13);\n        i0.ɵɵlistener(\"onEventSelected\", function CalendarPage_Template_calendar_onEventSelected_29_listener($event) {\n          return ctx.onEventSelected($event);\n        })(\"onTitleChanged\", function CalendarPage_Template_calendar_onTitleChanged_29_listener($event) {\n          return ctx.onViewTitleChanged($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"ion-fab\", 14)(31, \"ion-fab-button\", 15);\n        i0.ɵɵlistener(\"click\", function CalendarPage_Template_ion_fab_button_click_31_listener() {\n          return ctx.addEvent();\n        });\n        i0.ɵɵelement(32, \"ion-icon\", 16);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"fullscreen\", true);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.calendar.mode);\n        i0.ɵɵadvance(16);\n        i0.ɵɵtextInterpolate(ctx.viewTitle);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"eventSource\", ctx.eventSource)(\"calendarMode\", ctx.calendar.mode)(\"currentDate\", ctx.calendar.currentDate);\n      }\n    },\n    dependencies: [i3.NgControlStatus, i3.NgModel]\n  });\n  return CalendarPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}