{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Injectable, EventEmitter, ViewChild, Input, Output, Component, ElementRef, HostBinding, ViewEncapsulation, Inject, LOCALE_ID, NgModule } from '@angular/core';\nimport { DatePipe, CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { Subject } from 'rxjs';\nlet CalendarService = /*#__PURE__*/(() => {\n  let CalendarService = class CalendarService {\n    constructor() {\n      this.currentDateChangedFromParent = new Subject();\n      this.currentDateChangedFromChildren = new Subject();\n      this.eventSourceChanged = new Subject();\n      this.slideChanged = new Subject();\n      this.slideUpdated = new Subject();\n      this.currentDateChangedFromParent$ = this.currentDateChangedFromParent.asObservable();\n      this.currentDateChangedFromChildren$ = this.currentDateChangedFromChildren.asObservable();\n      this.eventSourceChanged$ = this.eventSourceChanged.asObservable();\n      this.slideChanged$ = this.slideChanged.asObservable();\n      this.slideUpdated$ = this.slideUpdated.asObservable();\n    }\n    setCurrentDate(val, fromParent = false) {\n      this._currentDate = new Date(val);\n      if (fromParent) {\n        this.currentDateChangedFromParent.next(val);\n      } else {\n        this.currentDateChangedFromChildren.next(val);\n      }\n    }\n    get currentDate() {\n      return this._currentDate;\n    }\n    rangeChanged(component) {\n      if (this.queryMode === 'local') {\n        if (component.eventSource && component.onDataLoaded) {\n          component.onDataLoaded();\n        }\n      } else if (this.queryMode === 'remote') {\n        let rangeStart = new Date(component.range.startTime.getTime()),\n          rangeEnd = new Date(component.range.endTime.getTime());\n        rangeStart.setHours(0);\n        if (rangeStart.getHours() === 23) {\n          rangeStart.setTime(rangeStart.getTime() + 3600000);\n        }\n        rangeEnd.setHours(0);\n        if (rangeEnd.getHours() === 23) {\n          rangeEnd.setTime(rangeEnd.getTime() + 3600000);\n        }\n        component.onRangeChanged.emit({\n          startTime: rangeStart,\n          endTime: rangeEnd\n        });\n      }\n    }\n    getStep(mode) {\n      switch (mode) {\n        case 'month':\n          return {\n            years: 0,\n            months: 1,\n            days: 0\n          };\n        case 'week':\n          return {\n            years: 0,\n            months: 0,\n            days: 7\n          };\n        case 'day':\n          return {\n            years: 0,\n            months: 0,\n            days: 1\n          };\n      }\n    }\n    getAdjacentCalendarDate(mode, direction) {\n      let calculateCalendarDate = this.currentDate;\n      const step = this.getStep(mode),\n        year = calculateCalendarDate.getFullYear() + direction * step.years,\n        month = calculateCalendarDate.getMonth() + direction * step.months,\n        date = calculateCalendarDate.getDate() + direction * step.days;\n      calculateCalendarDate = new Date(year, month, date, 12, 0, 0);\n      if (mode === 'month') {\n        const firstDayInNextMonth = new Date(year, month + 1, 1, 12, 0, 0);\n        if (firstDayInNextMonth.getTime() <= calculateCalendarDate.getTime()) {\n          calculateCalendarDate = new Date(firstDayInNextMonth.getTime() - 24 * 60 * 60 * 1000);\n        }\n      }\n      return calculateCalendarDate;\n    }\n    getAdjacentViewStartTime(component, direction) {\n      let adjacentCalendarDate = this.getAdjacentCalendarDate(component.mode, direction);\n      return component.getRange(adjacentCalendarDate).startTime;\n    }\n    populateAdjacentViews(component) {\n      let currentViewStartDate,\n        currentViewData,\n        toUpdateViewIndex,\n        currentViewIndex = component.currentViewIndex;\n      if (component.direction === 1) {\n        currentViewStartDate = this.getAdjacentViewStartTime(component, 1);\n        toUpdateViewIndex = (currentViewIndex + 1) % 3;\n        component.views[toUpdateViewIndex] = component.getViewData(currentViewStartDate);\n      } else if (component.direction === -1) {\n        currentViewStartDate = this.getAdjacentViewStartTime(component, -1);\n        toUpdateViewIndex = (currentViewIndex + 2) % 3;\n        component.views[toUpdateViewIndex] = component.getViewData(currentViewStartDate);\n      } else {\n        if (!component.views) {\n          currentViewData = [];\n          currentViewStartDate = component.range.startTime;\n          currentViewData.push(component.getViewData(currentViewStartDate));\n          currentViewStartDate = this.getAdjacentViewStartTime(component, 1);\n          currentViewData.push(component.getViewData(currentViewStartDate));\n          currentViewStartDate = this.getAdjacentViewStartTime(component, -1);\n          currentViewData.push(component.getViewData(currentViewStartDate));\n          component.views = currentViewData;\n        } else {\n          currentViewStartDate = component.range.startTime;\n          component.views[currentViewIndex] = component.getViewData(currentViewStartDate);\n          currentViewStartDate = this.getAdjacentViewStartTime(component, -1);\n          toUpdateViewIndex = (currentViewIndex + 2) % 3;\n          component.views[toUpdateViewIndex] = component.getViewData(currentViewStartDate);\n          currentViewStartDate = this.getAdjacentViewStartTime(component, 1);\n          toUpdateViewIndex = (currentViewIndex + 1) % 3;\n          component.views[toUpdateViewIndex] = component.getViewData(currentViewStartDate);\n        }\n      }\n    }\n    loadEvents() {\n      this.eventSourceChanged.next();\n    }\n    slide(direction) {\n      this.slideChanged.next(direction);\n    }\n    update() {\n      this.slideUpdated.next();\n    }\n  };\n  CalendarService = __decorate([Injectable()], CalendarService);\n  return CalendarService;\n})();\nvar MonthViewComponent_1;\nlet MonthViewComponent = MonthViewComponent_1 = class MonthViewComponent {\n  constructor(calendarService) {\n    this.calendarService = calendarService;\n    this.autoSelect = true;\n    this.dir = '';\n    this.onRangeChanged = new EventEmitter();\n    this.onEventSelected = new EventEmitter();\n    this.onTimeSelected = new EventEmitter(true);\n    this.onTitleChanged = new EventEmitter(true);\n    this.views = [];\n    this.currentViewIndex = 0;\n    this.mode = 'month';\n    this.direction = 0;\n    this.moveOnSelected = false;\n    this.inited = false;\n    this.callbackOnInit = true;\n  }\n  static getDates(startDate, n) {\n    const dates = new Array(n),\n      current = new Date(startDate.getTime());\n    let i = 0;\n    while (i < n) {\n      dates[i++] = new Date(current.getTime());\n      current.setDate(current.getDate() + 1);\n    }\n    return dates;\n  }\n  ngOnInit() {\n    if (!this.sliderOptions) {\n      this.sliderOptions = {};\n    }\n    this.sliderOptions.loop = true;\n    if (this.dateFormatter && this.dateFormatter.formatMonthViewDay) {\n      this.formatDayLabel = this.dateFormatter.formatMonthViewDay;\n    } else {\n      const dayLabelDatePipe = new DatePipe('en-US');\n      this.formatDayLabel = function (date) {\n        return dayLabelDatePipe.transform(date, this.formatDay);\n      };\n    }\n    if (this.dateFormatter && this.dateFormatter.formatMonthViewDayHeader) {\n      this.formatDayHeaderLabel = this.dateFormatter.formatMonthViewDayHeader;\n    } else {\n      const datePipe = new DatePipe(this.locale);\n      this.formatDayHeaderLabel = function (date) {\n        return datePipe.transform(date, this.formatDayHeader);\n      };\n    }\n    if (this.dateFormatter && this.dateFormatter.formatMonthViewTitle) {\n      this.formatTitle = this.dateFormatter.formatMonthViewTitle;\n    } else {\n      const datePipe = new DatePipe(this.locale);\n      this.formatTitle = function (date) {\n        return datePipe.transform(date, this.formatMonthTitle);\n      };\n    }\n    if (this.lockSwipeToPrev) {\n      this.slider.lockSwipeToPrev(true);\n    }\n    if (this.lockSwipes) {\n      this.slider.lockSwipes(true);\n    }\n    this.refreshView();\n    this.inited = true;\n    this.currentDateChangedFromParentSubscription = this.calendarService.currentDateChangedFromParent$.subscribe(currentDate => {\n      this.refreshView();\n    });\n    this.eventSourceChangedSubscription = this.calendarService.eventSourceChanged$.subscribe(() => {\n      this.onDataLoaded();\n    });\n    this.slideChangedSubscription = this.calendarService.slideChanged$.subscribe(direction => {\n      if (direction === 1) {\n        this.slider.slideNext();\n      } else if (direction === -1) {\n        this.slider.slidePrev();\n      }\n    });\n    this.slideUpdatedSubscription = this.calendarService.slideUpdated$.subscribe(() => {\n      this.slider.update();\n    });\n  }\n  ngOnDestroy() {\n    if (this.currentDateChangedFromParentSubscription) {\n      this.currentDateChangedFromParentSubscription.unsubscribe();\n      this.currentDateChangedFromParentSubscription = null;\n    }\n    if (this.eventSourceChangedSubscription) {\n      this.eventSourceChangedSubscription.unsubscribe();\n      this.eventSourceChangedSubscription = null;\n    }\n    if (this.slideChangedSubscription) {\n      this.slideChangedSubscription.unsubscribe();\n      this.slideChangedSubscription = null;\n    }\n    if (this.slideUpdatedSubscription) {\n      this.slideUpdatedSubscription.unsubscribe();\n      this.slideUpdatedSubscription = null;\n    }\n  }\n  ngOnChanges(changes) {\n    if (!this.inited) {\n      return;\n    }\n    const eventSourceChange = changes.eventSource;\n    if (eventSourceChange && eventSourceChange.currentValue) {\n      this.onDataLoaded();\n    }\n    const lockSwipeToPrev = changes.lockSwipeToPrev;\n    if (lockSwipeToPrev) {\n      this.slider.lockSwipeToPrev(lockSwipeToPrev.currentValue);\n    }\n    const lockSwipes = changes.lockSwipes;\n    if (lockSwipes) {\n      this.slider.lockSwipes(lockSwipes.currentValue);\n    }\n  }\n  ngAfterViewInit() {\n    const title = this.getTitle();\n    this.onTitleChanged.emit(title);\n  }\n  onSlideChanged() {\n    if (this.callbackOnInit) {\n      this.callbackOnInit = false;\n      return;\n    }\n    let direction = 0;\n    const currentViewIndex = this.currentViewIndex;\n    this.slider.getActiveIndex().then(currentSlideIndex => {\n      currentSlideIndex = (currentSlideIndex + 2) % 3;\n      if (isNaN(currentSlideIndex)) {\n        currentSlideIndex = currentViewIndex;\n      }\n      if (currentSlideIndex - currentViewIndex === 1) {\n        direction = 1;\n      } else if (currentSlideIndex === 0 && currentViewIndex === 2) {\n        direction = 1;\n        this.slider.slideTo(1, 0, false);\n      } else if (currentViewIndex - currentSlideIndex === 1) {\n        direction = -1;\n      } else if (currentSlideIndex === 2 && currentViewIndex === 0) {\n        direction = -1;\n        this.slider.slideTo(3, 0, false);\n      }\n      this.currentViewIndex = currentSlideIndex;\n      this.move(direction);\n    });\n  }\n  move(direction) {\n    if (direction === 0) {\n      return;\n    }\n    this.direction = direction;\n    if (!this.moveOnSelected) {\n      const adjacentDate = this.calendarService.getAdjacentCalendarDate(this.mode, direction);\n      this.calendarService.setCurrentDate(adjacentDate);\n    }\n    this.refreshView();\n    this.direction = 0;\n    this.moveOnSelected = false;\n  }\n  createDateObject(date) {\n    let disabled = false;\n    if (this.markDisabled) {\n      disabled = this.markDisabled(date);\n    }\n    return {\n      date,\n      events: [],\n      label: this.formatDayLabel(date),\n      secondary: false,\n      disabled\n    };\n  }\n  getViewData(startTime) {\n    const startDate = startTime,\n      date = startDate.getDate(),\n      month = (startDate.getMonth() + (date !== 1 ? 1 : 0)) % 12;\n    const dates = MonthViewComponent_1.getDates(startDate, 42);\n    const days = [];\n    for (let i = 0; i < 42; i++) {\n      const dateObject = this.createDateObject(dates[i]);\n      dateObject.secondary = dates[i].getMonth() !== month;\n      days[i] = dateObject;\n    }\n    const dayHeaders = [];\n    for (let i = 0; i < 7; i++) {\n      dayHeaders.push(this.formatDayHeaderLabel(days[i].date));\n    }\n    return {\n      dates: days,\n      dayHeaders\n    };\n  }\n  getHighlightClass(date) {\n    let className = '';\n    if (date.hasEvent) {\n      if (date.secondary) {\n        className = 'monthview-secondary-with-event';\n      } else {\n        className = 'monthview-primary-with-event';\n      }\n    }\n    if (date.selected) {\n      if (className) {\n        className += ' ';\n      }\n      className += 'monthview-selected';\n    }\n    if (date.current) {\n      if (className) {\n        className += ' ';\n      }\n      className += 'monthview-current';\n    }\n    if (date.secondary) {\n      if (className) {\n        className += ' ';\n      }\n      className += 'text-muted';\n    }\n    if (date.disabled) {\n      if (className) {\n        className += ' ';\n      }\n      className += 'monthview-disabled';\n    }\n    return className;\n  }\n  getRange(currentDate) {\n    const year = currentDate.getFullYear(),\n      month = currentDate.getMonth(),\n      firstDayOfMonth = new Date(year, month, 1, 12, 0, 0),\n      // set hour to 12 to avoid DST problem\n      difference = this.startingDayMonth - firstDayOfMonth.getDay(),\n      numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference,\n      startDate = new Date(firstDayOfMonth.getTime());\n    if (numDisplayedFromPreviousMonth > 0) {\n      startDate.setDate(-numDisplayedFromPreviousMonth + 1);\n    }\n    const endDate = new Date(startDate.getTime());\n    endDate.setDate(endDate.getDate() + 42);\n    return {\n      startTime: startDate,\n      endTime: endDate\n    };\n  }\n  onDataLoaded() {\n    const range = this.range,\n      eventSource = this.eventSource,\n      len = eventSource ? eventSource.length : 0,\n      startTime = range.startTime,\n      endTime = range.endTime,\n      utcStartTime = Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate()),\n      utcEndTime = Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate()),\n      currentViewIndex = this.currentViewIndex,\n      dates = this.views[currentViewIndex].dates,\n      oneDay = 86400000,\n      eps = 0.0006;\n    for (let r = 0; r < 42; r += 1) {\n      if (dates[r].hasEvent) {\n        dates[r].hasEvent = false;\n        dates[r].events = [];\n      }\n    }\n    for (let i = 0; i < len; i += 1) {\n      const event = eventSource[i],\n        eventStartTime = event.startTime,\n        eventEndTime = event.endTime;\n      let eventUTCStartTime, eventUTCEndTime;\n      if (event.allDay) {\n        eventUTCStartTime = eventStartTime.getTime();\n        eventUTCEndTime = eventEndTime.getTime();\n      } else {\n        eventUTCStartTime = Date.UTC(eventStartTime.getFullYear(), eventStartTime.getMonth(), eventStartTime.getDate());\n        eventUTCEndTime = Date.UTC(eventEndTime.getFullYear(), eventEndTime.getMonth(), eventEndTime.getDate() + 1);\n      }\n      if (eventUTCEndTime <= utcStartTime || eventUTCStartTime >= utcEndTime) {\n        continue;\n      }\n      let timeDifferenceStart, timeDifferenceEnd;\n      if (eventUTCStartTime < utcStartTime) {\n        timeDifferenceStart = 0;\n      } else {\n        timeDifferenceStart = (eventUTCStartTime - utcStartTime) / oneDay;\n      }\n      if (eventUTCEndTime > utcEndTime) {\n        timeDifferenceEnd = (utcEndTime - utcStartTime) / oneDay;\n      } else {\n        timeDifferenceEnd = (eventUTCEndTime - utcStartTime) / oneDay;\n      }\n      let index = Math.floor(timeDifferenceStart);\n      const endIndex = Math.ceil(timeDifferenceEnd - eps);\n      while (index < endIndex) {\n        dates[index].hasEvent = true;\n        let eventSet = dates[index].events;\n        if (eventSet) {\n          eventSet.push(event);\n        } else {\n          eventSet = [];\n          eventSet.push(event);\n          dates[index].events = eventSet;\n        }\n        index += 1;\n      }\n    }\n    for (let r = 0; r < 42; r += 1) {\n      if (dates[r].hasEvent) {\n        dates[r].events.sort(this.compareEvent);\n      }\n    }\n    if (this.autoSelect) {\n      let findSelected = false;\n      for (let r = 0; r < 42; r += 1) {\n        if (dates[r].selected) {\n          this.selectedDate = dates[r];\n          findSelected = true;\n          break;\n        }\n      }\n      if (findSelected) {\n        this.onTimeSelected.emit({\n          selectedTime: this.selectedDate.date,\n          events: this.selectedDate.events,\n          disabled: this.selectedDate.disabled\n        });\n      }\n    }\n  }\n  refreshView() {\n    this.range = this.getRange(this.calendarService.currentDate);\n    if (this.inited) {\n      const title = this.getTitle();\n      this.onTitleChanged.emit(title);\n    }\n    this.calendarService.populateAdjacentViews(this);\n    this.updateCurrentView(this.range.startTime, this.views[this.currentViewIndex]);\n    this.calendarService.rangeChanged(this);\n  }\n  getTitle() {\n    const currentViewStartDate = this.range.startTime,\n      date = currentViewStartDate.getDate(),\n      month = (currentViewStartDate.getMonth() + (date !== 1 ? 1 : 0)) % 12,\n      year = currentViewStartDate.getFullYear() + (date !== 1 && month === 0 ? 1 : 0),\n      headerDate = new Date(year, month, 1, 12, 0, 0, 0);\n    return this.formatTitle(headerDate);\n  }\n  compareEvent(event1, event2) {\n    if (event1.allDay) {\n      return 1;\n    } else if (event2.allDay) {\n      return -1;\n    } else {\n      return event1.startTime.getTime() - event2.startTime.getTime();\n    }\n  }\n  select(viewDate) {\n    if (!this.views) {\n      return;\n    }\n    const selectedDate = viewDate.date,\n      events = viewDate.events;\n    if (!viewDate.disabled) {\n      const dates = this.views[this.currentViewIndex].dates,\n        currentCalendarDate = this.calendarService.currentDate,\n        currentMonth = currentCalendarDate.getMonth(),\n        currentYear = currentCalendarDate.getFullYear(),\n        selectedMonth = selectedDate.getMonth(),\n        selectedYear = selectedDate.getFullYear();\n      let direction = 0;\n      if (currentYear === selectedYear) {\n        if (currentMonth !== selectedMonth) {\n          direction = currentMonth < selectedMonth ? 1 : -1;\n        }\n      } else {\n        direction = currentYear < selectedYear ? 1 : -1;\n      }\n      this.calendarService.setCurrentDate(selectedDate);\n      if (direction === 0) {\n        const currentViewStartDate = this.range.startTime,\n          oneDay = 86400000,\n          selectedDayDifference = Math.round((Date.UTC(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay);\n        for (let r = 0; r < 42; r += 1) {\n          dates[r].selected = false;\n        }\n        if (selectedDayDifference >= 0 && selectedDayDifference < 42) {\n          dates[selectedDayDifference].selected = true;\n          this.selectedDate = dates[selectedDayDifference];\n        }\n      } else {\n        this.moveOnSelected = true;\n        this.slideView(direction);\n      }\n    }\n    this.onTimeSelected.emit({\n      selectedTime: selectedDate,\n      events,\n      disabled: viewDate.disabled\n    });\n  }\n  slideView(direction) {\n    if (direction === 1) {\n      this.slider.slideNext();\n    } else if (direction === -1) {\n      this.slider.slidePrev();\n    }\n  }\n  updateCurrentView(currentViewStartDate, view) {\n    const currentCalendarDate = this.calendarService.currentDate,\n      today = new Date(),\n      oneDay = 86400000,\n      selectedDayDifference = Math.round((Date.UTC(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth(), currentCalendarDate.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay),\n      currentDayDifference = Math.round((Date.UTC(today.getFullYear(), today.getMonth(), today.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay);\n    for (let r = 0; r < 42; r += 1) {\n      view.dates[r].selected = false;\n    }\n    if (selectedDayDifference >= 0 && selectedDayDifference < 42 && !view.dates[selectedDayDifference].disabled && (this.autoSelect || this.moveOnSelected)) {\n      view.dates[selectedDayDifference].selected = true;\n      this.selectedDate = view.dates[selectedDayDifference];\n    } else {\n      this.selectedDate = {\n        date: null,\n        events: [],\n        label: null,\n        secondary: null,\n        disabled: false\n      };\n    }\n    if (currentDayDifference >= 0 && currentDayDifference < 42) {\n      view.dates[currentDayDifference].current = true;\n    }\n  }\n  eventSelected(event) {\n    this.onEventSelected.emit(event);\n  }\n};\nMonthViewComponent.ctorParameters = () => [{\n  type: CalendarService\n}];\n__decorate([ViewChild('monthSlider', {\n  static: true\n})], MonthViewComponent.prototype, \"slider\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"monthviewDisplayEventTemplate\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"monthviewInactiveDisplayEventTemplate\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"monthviewEventDetailTemplate\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"formatDay\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"formatDayHeader\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"formatMonthTitle\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"eventSource\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"startingDayMonth\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"showEventDetail\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"noEventsLabel\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"autoSelect\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"markDisabled\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"locale\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"dateFormatter\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"dir\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"lockSwipeToPrev\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"lockSwipes\", void 0);\n__decorate([Input()], MonthViewComponent.prototype, \"sliderOptions\", void 0);\n__decorate([Output()], MonthViewComponent.prototype, \"onRangeChanged\", void 0);\n__decorate([Output()], MonthViewComponent.prototype, \"onEventSelected\", void 0);\n__decorate([Output()], MonthViewComponent.prototype, \"onTimeSelected\", void 0);\n__decorate([Output()], MonthViewComponent.prototype, \"onTitleChanged\", void 0);\nMonthViewComponent = MonthViewComponent_1 = __decorate([Component({\n  selector: 'monthview',\n  template: `\n        <div>\n            <ion-slides #monthSlider [options]=\"sliderOptions\" [dir]=\"dir\" (ionSlideDidChange)=\"onSlideChanged()\">\n                <ion-slide>\n                    <table *ngIf=\"0===currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr>\n                            <th *ngFor=\"let dayHeader of views[0].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\" tappable (click)=\"select(views[0].dates[row*7+col])\"\n                                [ngClass]=\"getHighlightClass(views[0].dates[row*7+col])\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[0], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <table *ngIf=\"0!==currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr class=\"text-center\">\n                            <th *ngFor=\"let dayHeader of views[0].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewInactiveDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[0], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        <tr>\n                        </tbody>\n                    </table>\n                </ion-slide>\n                <ion-slide>\n                    <table *ngIf=\"1===currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr>\n                            <th *ngFor=\"let dayHeader of views[1].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\" tappable (click)=\"select(views[1].dates[row*7+col])\"\n                                [ngClass]=\"getHighlightClass(views[1].dates[row*7+col])\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[1], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <table *ngIf=\"1!==currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr class=\"text-center\">\n                            <th *ngFor=\"let dayHeader of views[1].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewInactiveDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[1], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        <tr>\n                        </tbody>\n                    </table>\n                </ion-slide>\n                <ion-slide>\n                    <table *ngIf=\"2===currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr>\n                            <th *ngFor=\"let dayHeader of views[2].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\" tappable (click)=\"select(views[2].dates[row*7+col])\"\n                                [ngClass]=\"getHighlightClass(views[2].dates[row*7+col])\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[2], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <table *ngIf=\"2!==currentViewIndex\" class=\"table table-bordered table-fixed monthview-datetable\">\n                        <thead>\n                        <tr class=\"text-center\">\n                            <th *ngFor=\"let dayHeader of views[2].dayHeaders\">\n                                <small>{{dayHeader}}</small>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr *ngFor=\"let row of [0,1,2,3,4,5]\">\n                            <td *ngFor=\"let col of [0,1,2,3,4,5,6]\">\n                                <ng-template [ngTemplateOutlet]=\"monthviewInactiveDisplayEventTemplate\"\n                                             [ngTemplateOutletContext]=\"{view: views[2], row: row, col: col}\">\n                                </ng-template>\n                            </td>\n                        <tr>\n                        </tbody>\n                    </table>\n                </ion-slide>\n            </ion-slides>\n            <ng-template [ngTemplateOutlet]=\"monthviewEventDetailTemplate\"\n                         [ngTemplateOutletContext]=\"{showEventDetail:showEventDetail, selectedDate: selectedDate, noEventsLabel: noEventsLabel}\">\n            </ng-template>\n        </div>\n    `,\n  styles: [`\n        .text-muted {\n            color: #999;\n        }\n\n        .table-fixed {\n            table-layout: fixed;\n        }\n\n        .table {\n            width: 100%;\n            max-width: 100%;\n            background-color: transparent;\n        }\n\n        .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td,\n        .table > tbody > tr > td, .table > tfoot > tr > td {\n            padding: 8px;\n            line-height: 20px;\n            vertical-align: top;\n        }\n\n        .table > thead > tr > th {\n            vertical-align: bottom;\n            border-bottom: 2px solid #ddd;\n        }\n\n        .table > thead:first-child > tr:first-child > th, .table > thead:first-child > tr:first-child > td {\n            border-top: 0\n        }\n\n        .table > tbody + tbody {\n            border-top: 2px solid #ddd;\n        }\n\n        .table-bordered {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > th,\n        .table-bordered > thead > tr > td, .table-bordered > tbody > tr > td, .table-bordered > tfoot > tr > td {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > thead > tr > td {\n            border-bottom-width: 2px;\n        }\n\n        .table-striped > tbody > tr:nth-child(odd) > td, .table-striped > tbody > tr:nth-child(odd) > th {\n            background-color: #f9f9f9\n        }\n\n        .monthview-primary-with-event {\n            background-color: #3a87ad;\n            color: white;\n        }\n\n        .monthview-current {\n            background-color: #f0f0f0;\n        }\n\n        .monthview-selected {\n            background-color: #009900;\n            color: white;\n        }\n\n        .monthview-datetable td.monthview-disabled {\n            color: lightgrey;\n            cursor: default;\n        }\n\n        .monthview-datetable th {\n            text-align: center;\n        }\n\n        .monthview-datetable td {\n            cursor: pointer;\n            text-align: center;\n        }\n\n        .monthview-secondary-with-event {\n            background-color: #d9edf7;\n        }\n\n        ::-webkit-scrollbar,\n        *::-webkit-scrollbar {\n            display: none;\n        }\n    `]\n})], MonthViewComponent);\nvar WeekViewComponent_1;\nlet WeekViewComponent = WeekViewComponent_1 = class WeekViewComponent {\n  constructor(calendarService, elm) {\n    this.calendarService = calendarService;\n    this.elm = elm;\n    this.class = true;\n    this.autoSelect = true;\n    this.dir = '';\n    this.scrollToHour = 0;\n    this.onRangeChanged = new EventEmitter();\n    this.onEventSelected = new EventEmitter();\n    this.onTimeSelected = new EventEmitter();\n    this.onTitleChanged = new EventEmitter(true);\n    this.views = [];\n    this.currentViewIndex = 0;\n    this.direction = 0;\n    this.mode = 'week';\n    this.inited = false;\n    this.callbackOnInit = true;\n  }\n  static createDateObjects(startTime, startHour, endHour, timeInterval) {\n    const times = [],\n      currentHour = 0,\n      currentDate = startTime.getDate();\n    let hourStep, minStep;\n    if (timeInterval < 1) {\n      hourStep = Math.floor(1 / timeInterval);\n      minStep = 60;\n    } else {\n      hourStep = 1;\n      minStep = Math.floor(60 / timeInterval);\n    }\n    for (let hour = startHour; hour < endHour; hour += hourStep) {\n      for (let interval = 0; interval < 60; interval += minStep) {\n        const row = [];\n        for (let day = 0; day < 7; day += 1) {\n          const time = new Date(startTime.getTime());\n          time.setHours(currentHour + hour, interval);\n          time.setDate(currentDate + day);\n          row.push({\n            events: [],\n            time\n          });\n        }\n        times.push(row);\n      }\n    }\n    return times;\n  }\n  static getDates(startTime, n) {\n    const dates = new Array(n),\n      current = new Date(startTime.getTime());\n    let i = 0;\n    while (i < n) {\n      dates[i++] = {\n        date: new Date(current.getTime()),\n        events: [],\n        dayHeader: ''\n      };\n      current.setDate(current.getDate() + 1);\n    }\n    return dates;\n  }\n  static compareEventByStartOffset(eventA, eventB) {\n    return eventA.startOffset - eventB.startOffset;\n  }\n  static calculateWidth(orderedEvents, size, hourParts) {\n    const totalSize = size * hourParts,\n      cells = new Array(totalSize);\n    // sort by position in descending order, the right most columns should be calculated first\n    orderedEvents.sort((eventA, eventB) => {\n      return eventB.position - eventA.position;\n    });\n    for (let i = 0; i < totalSize; i += 1) {\n      cells[i] = {\n        calculated: false,\n        events: []\n      };\n    }\n    const len = orderedEvents.length;\n    for (let i = 0; i < len; i += 1) {\n      const event = orderedEvents[i];\n      let index = event.startIndex * hourParts + event.startOffset;\n      while (index < event.endIndex * hourParts - event.endOffset) {\n        cells[index].events.push(event);\n        index += 1;\n      }\n    }\n    let i = 0;\n    while (i < len) {\n      let event = orderedEvents[i];\n      if (!event.overlapNumber) {\n        const overlapNumber = event.position + 1;\n        event.overlapNumber = overlapNumber;\n        const eventQueue = [event];\n        while (event = eventQueue.shift()) {\n          let index = event.startIndex * hourParts + event.startOffset;\n          while (index < event.endIndex * hourParts - event.endOffset) {\n            if (!cells[index].calculated) {\n              cells[index].calculated = true;\n              if (cells[index].events) {\n                const eventCountInCell = cells[index].events.length;\n                for (let j = 0; j < eventCountInCell; j += 1) {\n                  const currentEventInCell = cells[index].events[j];\n                  if (!currentEventInCell.overlapNumber) {\n                    currentEventInCell.overlapNumber = overlapNumber;\n                    eventQueue.push(currentEventInCell);\n                  }\n                }\n              }\n            }\n            index += 1;\n          }\n        }\n      }\n      i += 1;\n    }\n  }\n  ngOnInit() {\n    if (!this.sliderOptions) {\n      this.sliderOptions = {};\n    }\n    this.sliderOptions.loop = true;\n    this.hourRange = (this.endHour - this.startHour) * this.hourSegments;\n    if (this.dateFormatter && this.dateFormatter.formatWeekViewDayHeader) {\n      this.formatDayHeader = this.dateFormatter.formatWeekViewDayHeader;\n    } else {\n      const datePipe = new DatePipe(this.locale);\n      this.formatDayHeader = function (date) {\n        return datePipe.transform(date, this.formatWeekViewDayHeader);\n      };\n    }\n    if (this.dateFormatter && this.dateFormatter.formatWeekViewTitle) {\n      this.formatTitle = this.dateFormatter.formatWeekViewTitle;\n    } else {\n      const datePipe = new DatePipe(this.locale);\n      this.formatTitle = function (date) {\n        return datePipe.transform(date, this.formatWeekTitle);\n      };\n    }\n    if (this.dateFormatter && this.dateFormatter.formatWeekViewHourColumn) {\n      this.formatHourColumnLabel = this.dateFormatter.formatWeekViewHourColumn;\n    } else {\n      const datePipe = new DatePipe(this.locale);\n      this.formatHourColumnLabel = function (date) {\n        return datePipe.transform(date, this.formatHourColumn);\n      };\n    }\n    if (this.lockSwipeToPrev) {\n      this.slider.lockSwipeToPrev(true);\n    }\n    if (this.lockSwipes) {\n      this.slider.lockSwipes(true);\n    }\n    this.refreshView();\n    this.hourColumnLabels = this.getHourColumnLabels();\n    this.inited = true;\n    this.currentDateChangedFromParentSubscription = this.calendarService.currentDateChangedFromParent$.subscribe(currentDate => {\n      this.refreshView();\n    });\n    this.eventSourceChangedSubscription = this.calendarService.eventSourceChanged$.subscribe(() => {\n      this.onDataLoaded();\n    });\n    this.slideChangedSubscription = this.calendarService.slideChanged$.subscribe(direction => {\n      if (direction === 1) {\n        this.slider.slideNext();\n      } else if (direction === -1) {\n        this.slider.slidePrev();\n      }\n    });\n    this.slideUpdatedSubscription = this.calendarService.slideUpdated$.subscribe(() => {\n      this.slider.update();\n    });\n  }\n  ngAfterViewInit() {\n    const title = this.getTitle();\n    this.onTitleChanged.emit(title);\n    if (this.scrollToHour > 0) {\n      const hourColumns = this.elm.nativeElement.querySelector('.weekview-normal-event-container').querySelectorAll('.calendar-hour-column');\n      const me = this;\n      setTimeout(() => {\n        me.initScrollPosition = hourColumns[me.scrollToHour - me.startHour].offsetTop;\n      }, 50);\n    }\n  }\n  ngOnChanges(changes) {\n    if (!this.inited) {\n      return;\n    }\n    const eventSourceChange = changes.eventSource;\n    if (eventSourceChange && eventSourceChange.currentValue) {\n      this.onDataLoaded();\n    }\n    const lockSwipeToPrev = changes.lockSwipeToPrev;\n    if (lockSwipeToPrev) {\n      this.slider.lockSwipeToPrev(lockSwipeToPrev.currentValue);\n    }\n    const lockSwipes = changes.lockSwipes;\n    if (lockSwipes) {\n      this.slider.lockSwipes(lockSwipes.currentValue);\n    }\n  }\n  ngOnDestroy() {\n    if (this.currentDateChangedFromParentSubscription) {\n      this.currentDateChangedFromParentSubscription.unsubscribe();\n      this.currentDateChangedFromParentSubscription = null;\n    }\n    if (this.eventSourceChangedSubscription) {\n      this.eventSourceChangedSubscription.unsubscribe();\n      this.eventSourceChangedSubscription = null;\n    }\n    if (this.slideChangedSubscription) {\n      this.slideChangedSubscription.unsubscribe();\n      this.slideChangedSubscription = null;\n    }\n    if (this.slideUpdatedSubscription) {\n      this.slideUpdatedSubscription.unsubscribe();\n      this.slideUpdatedSubscription = null;\n    }\n  }\n  onSlideChanged() {\n    if (this.callbackOnInit) {\n      this.callbackOnInit = false;\n      return;\n    }\n    const currentViewIndex = this.currentViewIndex;\n    let direction = 0;\n    this.slider.getActiveIndex().then(currentSlideIndex => {\n      currentSlideIndex = (currentSlideIndex + 2) % 3;\n      if (isNaN(currentSlideIndex)) {\n        currentSlideIndex = currentViewIndex;\n      }\n      if (currentSlideIndex - currentViewIndex === 1) {\n        direction = 1;\n      } else if (currentSlideIndex === 0 && currentViewIndex === 2) {\n        direction = 1;\n        this.slider.slideTo(1, 0, false);\n      } else if (currentViewIndex - currentSlideIndex === 1) {\n        direction = -1;\n      } else if (currentSlideIndex === 2 && currentViewIndex === 0) {\n        direction = -1;\n        this.slider.slideTo(3, 0, false);\n      }\n      this.currentViewIndex = currentSlideIndex;\n      this.move(direction);\n    });\n  }\n  move(direction) {\n    if (direction === 0) {\n      return;\n    }\n    this.direction = direction;\n    const adjacent = this.calendarService.getAdjacentCalendarDate(this.mode, direction);\n    this.calendarService.setCurrentDate(adjacent);\n    this.refreshView();\n    this.direction = 0;\n  }\n  getHourColumnLabels() {\n    const hourColumnLabels = [];\n    for (let hour = 0, length = this.views[0].rows.length; hour < length; hour += 1) {\n      // handle edge case for DST\n      if (hour === 0 && this.views[0].rows[hour][0].time.getHours() !== this.startHour) {\n        const time = new Date(this.views[0].rows[hour][0].time);\n        time.setDate(time.getDate() + 1);\n        time.setHours(this.startHour);\n        hourColumnLabels.push(this.formatHourColumnLabel(time));\n      } else {\n        hourColumnLabels.push(this.formatHourColumnLabel(this.views[0].rows[hour][0].time));\n      }\n    }\n    return hourColumnLabels;\n  }\n  getViewData(startTime) {\n    const dates = WeekViewComponent_1.getDates(startTime, 7);\n    for (let i = 0; i < 7; i++) {\n      dates[i].dayHeader = this.formatDayHeader(dates[i].date);\n    }\n    return {\n      rows: WeekViewComponent_1.createDateObjects(startTime, this.startHour, this.endHour, this.hourSegments),\n      dates\n    };\n  }\n  getRange(currentDate) {\n    const year = currentDate.getFullYear(),\n      month = currentDate.getMonth(),\n      date = currentDate.getDate(),\n      day = currentDate.getDay();\n    let difference = day - this.startingDayWeek;\n    if (difference < 0) {\n      difference += 7;\n    }\n    // set hour to 12 to avoid DST problem\n    const firstDayOfWeek = new Date(year, month, date - difference, 12, 0, 0),\n      endTime = new Date(year, month, date - difference + 7, 12, 0, 0);\n    return {\n      startTime: firstDayOfWeek,\n      endTime\n    };\n  }\n  onDataLoaded() {\n    const eventSource = this.eventSource,\n      len = eventSource ? eventSource.length : 0,\n      startTime = this.range.startTime,\n      endTime = this.range.endTime,\n      utcStartTime = Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate()),\n      utcEndTime = Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate()),\n      currentViewIndex = this.currentViewIndex,\n      rows = this.views[currentViewIndex].rows,\n      dates = this.views[currentViewIndex].dates,\n      oneHour = 3600000,\n      oneDay = 86400000,\n      // add allday eps\n      eps = 0.016,\n      rangeStartRowIndex = this.startHour * this.hourSegments,\n      rangeEndRowIndex = this.endHour * this.hourSegments,\n      allRows = 24 * this.hourSegments;\n    let allDayEventInRange = false,\n      normalEventInRange = false;\n    for (let i = 0; i < 7; i += 1) {\n      dates[i].events = [];\n      dates[i].hasEvent = false;\n    }\n    for (let day = 0; day < 7; day += 1) {\n      for (let hour = 0; hour < this.hourRange; hour += 1) {\n        rows[hour][day].events = [];\n      }\n    }\n    for (let i = 0; i < len; i += 1) {\n      const event = eventSource[i];\n      const eventStartTime = event.startTime;\n      const eventEndTime = event.endTime;\n      let eventUTCStartTime, eventUTCEndTime;\n      if (event.allDay) {\n        eventUTCStartTime = eventStartTime.getTime();\n        eventUTCEndTime = eventEndTime.getTime();\n      } else {\n        eventUTCStartTime = Date.UTC(eventStartTime.getFullYear(), eventStartTime.getMonth(), eventStartTime.getDate());\n        eventUTCEndTime = Date.UTC(eventEndTime.getFullYear(), eventEndTime.getMonth(), eventEndTime.getDate() + 1);\n      }\n      if (eventUTCEndTime <= utcStartTime || eventUTCStartTime >= utcEndTime || eventStartTime >= eventEndTime) {\n        continue;\n      }\n      if (event.allDay) {\n        allDayEventInRange = true;\n        let allDayStartIndex;\n        if (eventUTCStartTime <= utcStartTime) {\n          allDayStartIndex = 0;\n        } else {\n          allDayStartIndex = Math.round((eventUTCStartTime - utcStartTime) / oneDay);\n        }\n        let allDayEndIndex;\n        if (eventUTCEndTime >= utcEndTime) {\n          allDayEndIndex = Math.round((utcEndTime - utcStartTime) / oneDay);\n        } else {\n          allDayEndIndex = Math.round((eventUTCEndTime - utcStartTime) / oneDay);\n        }\n        const displayAllDayEvent = {\n          event,\n          startIndex: allDayStartIndex,\n          endIndex: allDayEndIndex\n        };\n        let eventSet = dates[allDayStartIndex].events;\n        if (eventSet) {\n          eventSet.push(displayAllDayEvent);\n        } else {\n          eventSet = [];\n          eventSet.push(displayAllDayEvent);\n          dates[allDayStartIndex].events = eventSet;\n        }\n        dates[allDayStartIndex].hasEvent = true;\n      } else {\n        normalEventInRange = true;\n        let timeDifferenceStart;\n        if (eventUTCStartTime < utcStartTime) {\n          timeDifferenceStart = 0;\n        } else {\n          timeDifferenceStart = (eventUTCStartTime - utcStartTime) / oneHour * this.hourSegments + (eventStartTime.getHours() + eventStartTime.getMinutes() / 60) * this.hourSegments;\n        }\n        let timeDifferenceEnd;\n        if (eventUTCEndTime > utcEndTime) {\n          timeDifferenceEnd = (utcEndTime - utcStartTime) / oneHour * this.hourSegments;\n        } else {\n          timeDifferenceEnd = (eventUTCEndTime - oneDay - utcStartTime) / oneHour * this.hourSegments + (eventEndTime.getHours() + eventEndTime.getMinutes() / 60) * this.hourSegments;\n        }\n        const startIndex = Math.floor(timeDifferenceStart),\n          endIndex = Math.ceil(timeDifferenceEnd - eps);\n        let startRowIndex = startIndex % allRows,\n          dayIndex = Math.floor(startIndex / allRows),\n          endOfDay = dayIndex * allRows,\n          startOffset = 0,\n          endOffset = 0;\n        if (this.hourParts !== 1) {\n          if (startRowIndex < rangeStartRowIndex) {\n            startOffset = 0;\n          } else {\n            startOffset = Math.floor((timeDifferenceStart - startIndex) * this.hourParts);\n          }\n        }\n        do {\n          endOfDay += allRows;\n          let endRowIndex;\n          if (endOfDay < endIndex) {\n            endRowIndex = allRows;\n          } else {\n            if (endOfDay === endIndex) {\n              endRowIndex = allRows;\n            } else {\n              endRowIndex = endIndex % allRows;\n            }\n            if (this.hourParts !== 1) {\n              if (endRowIndex > rangeEndRowIndex) {\n                endOffset = 0;\n              } else {\n                endOffset = Math.floor((endIndex - timeDifferenceEnd) * this.hourParts);\n              }\n            }\n          }\n          if (startRowIndex < rangeStartRowIndex) {\n            startRowIndex = 0;\n          } else {\n            startRowIndex -= rangeStartRowIndex;\n          }\n          if (endRowIndex > rangeEndRowIndex) {\n            endRowIndex = rangeEndRowIndex;\n          }\n          endRowIndex -= rangeStartRowIndex;\n          if (startRowIndex < endRowIndex) {\n            const displayEvent = {\n              event,\n              startIndex: startRowIndex,\n              endIndex: endRowIndex,\n              startOffset,\n              endOffset\n            };\n            let eventSet = rows[startRowIndex][dayIndex].events;\n            if (eventSet) {\n              eventSet.push(displayEvent);\n            } else {\n              eventSet = [];\n              eventSet.push(displayEvent);\n              rows[startRowIndex][dayIndex].events = eventSet;\n            }\n            dates[dayIndex].hasEvent = true;\n          }\n          startRowIndex = 0;\n          startOffset = 0;\n          dayIndex += 1;\n        } while (endOfDay < endIndex);\n      }\n    }\n    if (normalEventInRange) {\n      for (let day = 0; day < 7; day += 1) {\n        let orderedEvents = [];\n        for (let hour = 0; hour < this.hourRange; hour += 1) {\n          if (rows[hour][day].events) {\n            rows[hour][day].events.sort(WeekViewComponent_1.compareEventByStartOffset);\n            orderedEvents = orderedEvents.concat(rows[hour][day].events);\n          }\n        }\n        if (orderedEvents.length > 0) {\n          this.placeEvents(orderedEvents);\n        }\n      }\n    }\n    if (allDayEventInRange) {\n      let orderedAllDayEvents = [];\n      for (let day = 0; day < 7; day += 1) {\n        if (dates[day].events) {\n          orderedAllDayEvents = orderedAllDayEvents.concat(dates[day].events);\n        }\n      }\n      if (orderedAllDayEvents.length > 0) {\n        this.placeAllDayEvents(orderedAllDayEvents);\n      }\n    }\n    if (this.autoSelect) {\n      let findSelected = false;\n      let selectedDate;\n      for (let r = 0; r < 7; r += 1) {\n        if (dates[r].selected) {\n          selectedDate = dates[r];\n          findSelected = true;\n          break;\n        }\n      }\n      if (findSelected) {\n        let disabled = false;\n        if (this.markDisabled) {\n          disabled = this.markDisabled(selectedDate.date);\n        }\n        this.onTimeSelected.emit({\n          selectedTime: selectedDate.date,\n          events: selectedDate.events.map(e => e.event),\n          disabled\n        });\n      }\n    }\n  }\n  refreshView() {\n    this.range = this.getRange(this.calendarService.currentDate);\n    if (this.inited) {\n      const title = this.getTitle();\n      this.onTitleChanged.emit(title);\n    }\n    this.calendarService.populateAdjacentViews(this);\n    this.updateCurrentView(this.range.startTime, this.views[this.currentViewIndex]);\n    this.calendarService.rangeChanged(this);\n  }\n  getTitle() {\n    const firstDayOfWeek = new Date(this.range.startTime.getTime());\n    firstDayOfWeek.setHours(12, 0, 0, 0);\n    return this.formatTitle(firstDayOfWeek);\n  }\n  getHighlightClass(date) {\n    let className = '';\n    if (date.hasEvent) {\n      if (className) {\n        className += ' ';\n      }\n      className = 'weekview-with-event';\n    }\n    if (date.selected) {\n      if (className) {\n        className += ' ';\n      }\n      className += 'weekview-selected';\n    }\n    if (date.current) {\n      if (className) {\n        className += ' ';\n      }\n      className += 'weekview-current';\n    }\n    return className;\n  }\n  select(selectedTime, events) {\n    let disabled = false;\n    if (this.markDisabled) {\n      disabled = this.markDisabled(selectedTime);\n    }\n    this.onTimeSelected.emit({\n      selectedTime,\n      events: events.map(e => e.event),\n      disabled\n    });\n  }\n  placeEvents(orderedEvents) {\n    this.calculatePosition(orderedEvents);\n    WeekViewComponent_1.calculateWidth(orderedEvents, this.hourRange, this.hourParts);\n  }\n  placeAllDayEvents(orderedEvents) {\n    this.calculatePosition(orderedEvents);\n  }\n  overlap(event1, event2) {\n    let earlyEvent = event1,\n      lateEvent = event2;\n    if (event1.startIndex > event2.startIndex || event1.startIndex === event2.startIndex && event1.startOffset > event2.startOffset) {\n      earlyEvent = event2;\n      lateEvent = event1;\n    }\n    if (earlyEvent.endIndex <= lateEvent.startIndex) {\n      return false;\n    } else {\n      return !(earlyEvent.endIndex - lateEvent.startIndex === 1 && earlyEvent.endOffset + lateEvent.startOffset >= this.hourParts);\n    }\n  }\n  calculatePosition(events) {\n    const len = events.length,\n      isForbidden = new Array(len);\n    let maxColumn = 0;\n    for (let i = 0; i < len; i += 1) {\n      let col;\n      for (col = 0; col < maxColumn; col += 1) {\n        isForbidden[col] = false;\n      }\n      for (let j = 0; j < i; j += 1) {\n        if (this.overlap(events[i], events[j])) {\n          isForbidden[events[j].position] = true;\n        }\n      }\n      for (col = 0; col < maxColumn; col += 1) {\n        if (!isForbidden[col]) {\n          break;\n        }\n      }\n      if (col < maxColumn) {\n        events[i].position = col;\n      } else {\n        events[i].position = maxColumn++;\n      }\n    }\n    if (this.dir === 'rtl') {\n      for (let i = 0; i < len; i += 1) {\n        events[i].position = maxColumn - 1 - events[i].position;\n      }\n    }\n  }\n  updateCurrentView(currentViewStartDate, view) {\n    const currentCalendarDate = this.calendarService.currentDate,\n      today = new Date(),\n      oneDay = 86400000,\n      selectedDayDifference = Math.round((Date.UTC(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth(), currentCalendarDate.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay),\n      currentDayDifference = Math.floor((Date.UTC(today.getFullYear(), today.getMonth(), today.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay);\n    for (let r = 0; r < 7; r += 1) {\n      view.dates[r].selected = false;\n    }\n    if (selectedDayDifference >= 0 && selectedDayDifference < 7 && this.autoSelect) {\n      view.dates[selectedDayDifference].selected = true;\n    }\n    if (currentDayDifference >= 0 && currentDayDifference < 7) {\n      view.dates[currentDayDifference].current = true;\n    }\n  }\n  daySelected(viewDate) {\n    const selectedDate = viewDate.date,\n      dates = this.views[this.currentViewIndex].dates,\n      currentViewStartDate = this.range.startTime,\n      oneDay = 86400000,\n      selectedDayDifference = Math.round((Date.UTC(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate()) - Date.UTC(currentViewStartDate.getFullYear(), currentViewStartDate.getMonth(), currentViewStartDate.getDate())) / oneDay);\n    this.calendarService.setCurrentDate(selectedDate);\n    for (let r = 0; r < 7; r += 1) {\n      dates[r].selected = false;\n    }\n    if (selectedDayDifference >= 0 && selectedDayDifference < 7) {\n      dates[selectedDayDifference].selected = true;\n    }\n    let disabled = false;\n    if (this.markDisabled) {\n      disabled = this.markDisabled(selectedDate);\n    }\n    this.onTimeSelected.emit({\n      selectedTime: selectedDate,\n      events: viewDate.events.map(e => e.event),\n      disabled\n    });\n  }\n  setScrollPosition(scrollPosition) {\n    this.initScrollPosition = scrollPosition;\n  }\n};\nWeekViewComponent.ctorParameters = () => [{\n  type: CalendarService\n}, {\n  type: ElementRef\n}];\n__decorate([ViewChild('weekSlider', {\n  static: true\n})], WeekViewComponent.prototype, \"slider\", void 0);\n__decorate([HostBinding('class.weekview')], WeekViewComponent.prototype, \"class\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"weekviewHeaderTemplate\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"weekviewAllDayEventTemplate\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"weekviewNormalEventTemplate\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"weekviewAllDayEventSectionTemplate\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"weekviewNormalEventSectionTemplate\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"weekviewInactiveAllDayEventSectionTemplate\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"weekviewInactiveNormalEventSectionTemplate\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"formatWeekTitle\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"formatWeekViewDayHeader\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"formatHourColumn\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"startingDayWeek\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"allDayLabel\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"hourParts\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"eventSource\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"autoSelect\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"markDisabled\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"locale\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"dateFormatter\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"dir\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"scrollToHour\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"preserveScrollPosition\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"lockSwipeToPrev\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"lockSwipes\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"startHour\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"endHour\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"sliderOptions\", void 0);\n__decorate([Input()], WeekViewComponent.prototype, \"hourSegments\", void 0);\n__decorate([Output()], WeekViewComponent.prototype, \"onRangeChanged\", void 0);\n__decorate([Output()], WeekViewComponent.prototype, \"onEventSelected\", void 0);\n__decorate([Output()], WeekViewComponent.prototype, \"onTimeSelected\", void 0);\n__decorate([Output()], WeekViewComponent.prototype, \"onTitleChanged\", void 0);\nWeekViewComponent = WeekViewComponent_1 = __decorate([Component({\n  selector: 'weekview',\n  template: `\n        <ion-slides #weekSlider [options]=\"sliderOptions\" [dir]=\"dir\" (ionSlideDidChange)=\"onSlideChanged()\"\n                    class=\"slides-container\">\n            <ion-slide class=\"slide-container\">\n                <table class=\"table table-bordered table-fixed weekview-header\">\n                    <thead>\n                    <tr>\n                        <th class=\"calendar-hour-column\"></th>\n                        <th class=\"weekview-header text-center\" *ngFor=\"let date of views[0].dates\"\n                            [ngClass]=\"getHighlightClass(date)\"\n                            (click)=\"daySelected(date)\">\n                            <ng-template [ngTemplateOutlet]=\"weekviewHeaderTemplate\"\n                                         [ngTemplateOutletContext]=\"{viewDate:date}\">\n                            </ng-template>\n                        </th>\n                    </tr>\n                    </thead>\n                </table>\n                <div *ngIf=\"0===currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[0].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day, eventTemplate:weekviewAllDayEventTemplate}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\"\n                                          [emitEvent]=\"preserveScrollPosition\" (onScroll)=\"setScrollPosition($event)\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[0].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\" tappable\n                                    (click)=\"select(tm.time, tm.events)\">\n                                    <ng-template [ngTemplateOutlet]=\"weekviewNormalEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:weekviewNormalEventTemplate}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n                <div *ngIf=\"0!==currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[0].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[0].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\">\n                                    <ng-template [ngTemplateOutlet]=\"weekviewInactiveNormalEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n            </ion-slide>\n            <ion-slide class=\"slide-container\">\n                <table class=\"table table-bordered table-fixed weekview-header\">\n                    <thead>\n                    <tr>\n                        <th class=\"calendar-hour-column\"></th>\n                        <th class=\"weekview-header text-center\" *ngFor=\"let date of views[1].dates\"\n                            [ngClass]=\"getHighlightClass(date)\"\n                            (click)=\"daySelected(date)\">\n                            <ng-template [ngTemplateOutlet]=\"weekviewHeaderTemplate\"\n                                         [ngTemplateOutletContext]=\"{viewDate:date}\">\n                            </ng-template>\n                        </th>\n                    </tr>\n                    </thead>\n                </table>\n                <div *ngIf=\"1===currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[1].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day, eventTemplate:weekviewAllDayEventTemplate}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\"\n                                          [emitEvent]=\"preserveScrollPosition\" (onScroll)=\"setScrollPosition($event)\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[1].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\" tappable\n                                    (click)=\"select(tm.time, tm.events)\">\n                                    <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewNormalEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:weekviewNormalEventTemplate}\">\n                                        </ng-template>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n                <div *ngIf=\"1!==currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[1].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[1].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\">\n                                    <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveNormalEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                        </ng-template>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n            </ion-slide>\n            <ion-slide class=\"slide-container\">\n                <table class=\"table table-bordered table-fixed weekview-header\">\n                    <thead>\n                    <tr>\n                        <th class=\"calendar-hour-column\"></th>\n                        <th class=\"weekview-header text-center\" *ngFor=\"let date of views[2].dates\"\n                            [ngClass]=\"getHighlightClass(date)\"\n                            (click)=\"daySelected(date)\">\n                            <ng-template [ngTemplateOutlet]=\"weekviewHeaderTemplate\"\n                                         [ngTemplateOutletContext]=\"{viewDate:date}\">\n                            </ng-template>\n                        </th>\n                    </tr>\n                    </thead>\n                </table>\n                <div *ngIf=\"2===currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[2].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day, eventTemplate:weekviewAllDayEventTemplate}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\"\n                                          [emitEvent]=\"preserveScrollPosition\" (onScroll)=\"setScrollPosition($event)\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[2].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\" tappable\n                                    (click)=\"select(tm.time, tm.events)\">\n                                    <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewNormalEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:weekviewNormalEventTemplate}\">\n                                        </ng-template>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n                <div *ngIf=\"2!==currentViewIndex\">\n                    <div class=\"weekview-allday-table\">\n                        <div class=\"weekview-allday-label\">{{allDayLabel}}</div>\n                        <div class=\"weekview-allday-content-wrapper scroll-content\">\n                            <table class=\"table table-fixed weekview-allday-content-table\">\n                                <tbody>\n                                <tr>\n                                    <td *ngFor=\"let day of views[2].dates\" class=\"calendar-cell\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveAllDayEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{day:day}\">\n                                        </ng-template>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <init-position-scroll class=\"weekview-normal-event-container\" [initPosition]=\"initScrollPosition\">\n                        <table class=\"table table-bordered table-fixed weekview-normal-event-table\">\n                            <tbody>\n                            <tr *ngFor=\"let row of views[2].rows; let i = index\">\n                                <td class=\"calendar-hour-column text-center\">\n                                    {{hourColumnLabels[i]}}\n                                </td>\n                                <td *ngFor=\"let tm of row\" class=\"calendar-cell\">\n                                    <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                                        <ng-template [ngTemplateOutlet]=\"weekviewInactiveNormalEventSectionTemplate\"\n                                                     [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                        </ng-template>\n                                    </div>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </init-position-scroll>\n                </div>\n            </ion-slide>\n        </ion-slides>\n    `,\n  encapsulation: ViewEncapsulation.None,\n  styles: [`\n        .table-fixed {\n            table-layout: fixed;\n        }\n\n        .table {\n            width: 100%;\n            max-width: 100%;\n            background-color: transparent;\n        }\n\n        .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td,\n        .table > tbody > tr > td, .table > tfoot > tr > td {\n            padding: 8px;\n            line-height: 20px;\n            vertical-align: top;\n        }\n\n        .table > thead > tr > th {\n            vertical-align: bottom;\n            border-bottom: 2px solid #ddd;\n        }\n\n        .table > thead:first-child > tr:first-child > th, .table > thead:first-child > tr:first-child > td {\n            border-top: 0\n        }\n\n        .table > tbody + tbody {\n            border-top: 2px solid #ddd;\n        }\n\n        .table-bordered {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > th,\n        .table-bordered > thead > tr > td, .table-bordered > tbody > tr > td, .table-bordered > tfoot > tr > td {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > thead > tr > td {\n            border-bottom-width: 2px;\n        }\n\n        .table-striped > tbody > tr:nth-child(odd) > td, .table-striped > tbody > tr:nth-child(odd) > th {\n            background-color: #f9f9f9\n        }\n\n        .calendar-hour-column {\n            width: 50px;\n            white-space: nowrap;\n        }\n\n        .calendar-event-wrap {\n            position: relative;\n            width: 100%;\n            height: 100%;\n        }\n\n        .calendar-event {\n            position: absolute;\n            padding: 2px;\n            cursor: pointer;\n            z-index: 10000;\n        }\n\n        .calendar-cell {\n            padding: 0 !important;\n            height: 37px;\n        }\n\n        .slides-container {\n            height: 100%;\n        }\n\n        .slide-container {\n            display: block;\n        }\n\n        .weekview-allday-label {\n            float: left;\n            height: 100%;\n            line-height: 50px;\n            text-align: center;\n            width: 50px;\n            border-left: 1px solid #ddd;\n        }\n\n        [dir=\"rtl\"] .weekview-allday-label {\n            float: right;\n            border-right: 1px solid #ddd;\n        }\n\n        .weekview-allday-content-wrapper {\n            margin-left: 50px;\n            overflow: hidden;\n            height: 51px;\n        }\n\n        [dir=\"rtl\"] .weekview-allday-content-wrapper {\n            margin-left: 0;\n            margin-right: 50px;\n        }\n\n        .weekview-allday-content-table {\n            min-height: 50px;\n        }\n\n        .weekview-allday-content-table td {\n            border-left: 1px solid #ddd;\n            border-right: 1px solid #ddd;\n        }\n\n        .weekview-header th {\n            overflow: hidden;\n            white-space: nowrap;\n            font-size: 14px;\n        }\n\n        .weekview-allday-table {\n            height: 50px;\n            position: relative;\n            border-bottom: 1px solid #ddd;\n            font-size: 14px;\n        }\n\n        .weekview-normal-event-container {\n            margin-top: 87px;\n            overflow: hidden;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            position: absolute;\n            font-size: 14px;\n        }\n\n        .scroll-content {\n            overflow-y: auto;\n            overflow-x: hidden;\n        }\n\n        ::-webkit-scrollbar,\n        *::-webkit-scrollbar {\n            display: none;\n        }\n\n        .table > tbody > tr > td.calendar-hour-column {\n            padding-left: 0;\n            padding-right: 0;\n            vertical-align: middle;\n        }\n\n        @media (max-width: 750px) {\n            .weekview-allday-label, .calendar-hour-column {\n                width: 31px;\n                font-size: 12px;\n            }\n\n            .weekview-allday-label {\n                padding-top: 4px;\n            }\n\n            .table > tbody > tr > td.calendar-hour-column {\n                padding-left: 0;\n                padding-right: 0;\n                vertical-align: middle;\n                line-height: 12px;\n            }\n\n            .table > thead > tr > th.weekview-header {\n                padding-left: 0;\n                padding-right: 0;\n                font-size: 12px;\n            }\n\n            .weekview-allday-label {\n                line-height: 20px;\n            }\n\n            .weekview-allday-content-wrapper {\n                margin-left: 31px;\n            }\n\n            [dir=\"rtl\"] .weekview-allday-content-wrapper {\n                margin-left: 0;\n                margin-right: 31px;\n            }\n        }\n    `]\n})], WeekViewComponent);\nvar DayViewComponent_1;\nlet DayViewComponent = DayViewComponent_1 = class DayViewComponent {\n  constructor(calendarService, elm) {\n    this.calendarService = calendarService;\n    this.elm = elm;\n    this.class = true;\n    this.dir = '';\n    this.scrollToHour = 0;\n    this.onRangeChanged = new EventEmitter();\n    this.onEventSelected = new EventEmitter();\n    this.onTimeSelected = new EventEmitter();\n    this.onTitleChanged = new EventEmitter(true);\n    this.views = [];\n    this.currentViewIndex = 0;\n    this.direction = 0;\n    this.mode = 'day';\n    this.inited = false;\n    this.callbackOnInit = true;\n  }\n  static createDateObjects(startTime, startHour, endHour, timeInterval) {\n    const rows = [],\n      currentHour = 0,\n      currentDate = startTime.getDate();\n    let time, hourStep, minStep;\n    if (timeInterval < 1) {\n      hourStep = Math.floor(1 / timeInterval);\n      minStep = 60;\n    } else {\n      hourStep = 1;\n      minStep = Math.floor(60 / timeInterval);\n    }\n    for (let hour = startHour; hour < endHour; hour += hourStep) {\n      for (let interval = 0; interval < 60; interval += minStep) {\n        time = new Date(startTime.getTime());\n        time.setHours(currentHour + hour, interval);\n        time.setDate(currentDate);\n        rows.push({\n          time,\n          events: []\n        });\n      }\n    }\n    return rows;\n  }\n  static compareEventByStartOffset(eventA, eventB) {\n    return eventA.startOffset - eventB.startOffset;\n  }\n  static calculateWidth(orderedEvents, size, hourParts) {\n    const totalSize = size * hourParts,\n      cells = new Array(totalSize);\n    // sort by position in descending order, the right most columns should be calculated first\n    orderedEvents.sort((eventA, eventB) => {\n      return eventB.position - eventA.position;\n    });\n    for (let i = 0; i < totalSize; i += 1) {\n      cells[i] = {\n        calculated: false,\n        events: []\n      };\n    }\n    const len = orderedEvents.length;\n    for (let i = 0; i < len; i += 1) {\n      const event = orderedEvents[i];\n      let index = event.startIndex * hourParts + event.startOffset;\n      while (index < event.endIndex * hourParts - event.endOffset) {\n        cells[index].events.push(event);\n        index += 1;\n      }\n    }\n    let i = 0;\n    while (i < len) {\n      let event = orderedEvents[i];\n      if (!event.overlapNumber) {\n        const overlapNumber = event.position + 1;\n        event.overlapNumber = overlapNumber;\n        const eventQueue = [event];\n        while (event = eventQueue.shift()) {\n          let index = event.startIndex * hourParts + event.startOffset;\n          while (index < event.endIndex * hourParts - event.endOffset) {\n            if (!cells[index].calculated) {\n              cells[index].calculated = true;\n              if (cells[index].events) {\n                const eventCountInCell = cells[index].events.length;\n                for (let j = 0; j < eventCountInCell; j += 1) {\n                  const currentEventInCell = cells[index].events[j];\n                  if (!currentEventInCell.overlapNumber) {\n                    currentEventInCell.overlapNumber = overlapNumber;\n                    eventQueue.push(currentEventInCell);\n                  }\n                }\n              }\n            }\n            index += 1;\n          }\n        }\n      }\n      i += 1;\n    }\n  }\n  ngOnInit() {\n    if (!this.sliderOptions) {\n      this.sliderOptions = {};\n    }\n    this.sliderOptions.loop = true;\n    this.hourRange = (this.endHour - this.startHour) * this.hourSegments;\n    if (this.dateFormatter && this.dateFormatter.formatDayViewTitle) {\n      this.formatTitle = this.dateFormatter.formatDayViewTitle;\n    } else {\n      const datePipe = new DatePipe(this.locale);\n      this.formatTitle = function (date) {\n        return datePipe.transform(date, this.formatDayTitle);\n      };\n    }\n    if (this.dateFormatter && this.dateFormatter.formatDayViewHourColumn) {\n      this.formatHourColumnLabel = this.dateFormatter.formatDayViewHourColumn;\n    } else {\n      const datePipe = new DatePipe(this.locale);\n      this.formatHourColumnLabel = function (date) {\n        return datePipe.transform(date, this.formatHourColumn);\n      };\n    }\n    if (this.lockSwipeToPrev) {\n      this.slider.lockSwipeToPrev(true);\n    }\n    if (this.lockSwipes) {\n      this.slider.lockSwipes(true);\n    }\n    this.refreshView();\n    this.hourColumnLabels = this.getHourColumnLabels();\n    this.inited = true;\n    this.currentDateChangedFromParentSubscription = this.calendarService.currentDateChangedFromParent$.subscribe(currentDate => {\n      this.refreshView();\n    });\n    this.eventSourceChangedSubscription = this.calendarService.eventSourceChanged$.subscribe(() => {\n      this.onDataLoaded();\n    });\n    this.slideChangedSubscription = this.calendarService.slideChanged$.subscribe(direction => {\n      if (direction === 1) {\n        this.slider.slideNext();\n      } else if (direction === -1) {\n        this.slider.slidePrev();\n      }\n    });\n    this.slideUpdatedSubscription = this.calendarService.slideUpdated$.subscribe(() => {\n      this.slider.update();\n    });\n  }\n  ngAfterViewInit() {\n    const title = this.getTitle();\n    this.onTitleChanged.emit(title);\n    if (this.scrollToHour > 0) {\n      const hourColumns = this.elm.nativeElement.querySelector('.dayview-normal-event-container').querySelectorAll('.calendar-hour-column');\n      const me = this;\n      setTimeout(() => {\n        me.initScrollPosition = hourColumns[me.scrollToHour - me.startHour].offsetTop;\n      }, 50);\n    }\n  }\n  ngOnChanges(changes) {\n    if (!this.inited) {\n      return;\n    }\n    const eventSourceChange = changes.eventSource;\n    if (eventSourceChange && eventSourceChange.currentValue) {\n      this.onDataLoaded();\n    }\n    const lockSwipeToPrev = changes.lockSwipeToPrev;\n    if (lockSwipeToPrev) {\n      this.slider.lockSwipeToPrev(lockSwipeToPrev.currentValue);\n    }\n    const lockSwipes = changes.lockSwipes;\n    if (lockSwipes) {\n      this.slider.lockSwipes(lockSwipes.currentValue);\n    }\n  }\n  ngOnDestroy() {\n    if (this.currentDateChangedFromParentSubscription) {\n      this.currentDateChangedFromParentSubscription.unsubscribe();\n      this.currentDateChangedFromParentSubscription = null;\n    }\n    if (this.eventSourceChangedSubscription) {\n      this.eventSourceChangedSubscription.unsubscribe();\n      this.eventSourceChangedSubscription = null;\n    }\n    if (this.slideChangedSubscription) {\n      this.slideChangedSubscription.unsubscribe();\n      this.slideChangedSubscription = null;\n    }\n    if (this.slideUpdatedSubscription) {\n      this.slideUpdatedSubscription.unsubscribe();\n      this.slideUpdatedSubscription = null;\n    }\n  }\n  onSlideChanged() {\n    if (this.callbackOnInit) {\n      this.callbackOnInit = false;\n      return;\n    }\n    let direction = 0;\n    const currentViewIndex = this.currentViewIndex;\n    this.slider.getActiveIndex().then(currentSlideIndex => {\n      currentSlideIndex = (currentSlideIndex + 2) % 3;\n      if (isNaN(currentSlideIndex)) {\n        currentSlideIndex = currentViewIndex;\n      }\n      if (currentSlideIndex - currentViewIndex === 1) {\n        direction = 1;\n      } else if (currentSlideIndex === 0 && currentViewIndex === 2) {\n        direction = 1;\n        this.slider.slideTo(1, 0, false);\n      } else if (currentViewIndex - currentSlideIndex === 1) {\n        direction = -1;\n      } else if (currentSlideIndex === 2 && currentViewIndex === 0) {\n        direction = -1;\n        this.slider.slideTo(3, 0, false);\n      }\n      this.currentViewIndex = currentSlideIndex;\n      this.move(direction);\n    });\n  }\n  move(direction) {\n    if (direction === 0) {\n      return;\n    }\n    this.direction = direction;\n    const adjacentDate = this.calendarService.getAdjacentCalendarDate(this.mode, direction);\n    this.calendarService.setCurrentDate(adjacentDate);\n    this.refreshView();\n    this.direction = 0;\n  }\n  getHourColumnLabels() {\n    const hourColumnLabels = [];\n    for (let hour = 0, length = this.views[0].rows.length; hour < length; hour += 1) {\n      // handle edge case for DST\n      if (hour === 0 && this.views[0].rows[hour].time.getHours() !== this.startHour) {\n        const time = new Date(this.views[0].rows[hour].time);\n        time.setDate(time.getDate() + 1);\n        time.setHours(this.startHour);\n        hourColumnLabels.push(this.formatHourColumnLabel(time));\n      } else {\n        hourColumnLabels.push(this.formatHourColumnLabel(this.views[0].rows[hour].time));\n      }\n    }\n    return hourColumnLabels;\n  }\n  getViewData(startTime) {\n    return {\n      rows: DayViewComponent_1.createDateObjects(startTime, this.startHour, this.endHour, this.hourSegments),\n      allDayEvents: []\n    };\n  }\n  getRange(currentDate) {\n    const year = currentDate.getFullYear(),\n      month = currentDate.getMonth(),\n      date = currentDate.getDate(),\n      startTime = new Date(year, month, date, 12, 0, 0),\n      endTime = new Date(year, month, date + 1, 12, 0, 0);\n    return {\n      startTime,\n      endTime\n    };\n  }\n  onDataLoaded() {\n    const eventSource = this.eventSource,\n      len = eventSource ? eventSource.length : 0,\n      startTime = this.range.startTime,\n      endTime = this.range.endTime,\n      utcStartTime = Date.UTC(startTime.getFullYear(), startTime.getMonth(), startTime.getDate()),\n      utcEndTime = Date.UTC(endTime.getFullYear(), endTime.getMonth(), endTime.getDate()),\n      currentViewIndex = this.currentViewIndex,\n      rows = this.views[currentViewIndex].rows,\n      allDayEvents = this.views[currentViewIndex].allDayEvents = [],\n      oneHour = 3600000,\n      eps = 0.016,\n      rangeStartRowIndex = this.startHour * this.hourSegments,\n      rangeEndRowIndex = this.endHour * this.hourSegments;\n    let normalEventInRange = false;\n    for (let hour = 0; hour < this.hourRange; hour += 1) {\n      rows[hour].events = [];\n    }\n    for (let i = 0; i < len; i += 1) {\n      const event = eventSource[i];\n      const eventStartTime = event.startTime;\n      const eventEndTime = event.endTime;\n      let eventUTCStartTime, eventUTCEndTime;\n      if (event.allDay) {\n        eventUTCStartTime = eventStartTime.getTime();\n        eventUTCEndTime = eventEndTime.getTime();\n      } else {\n        eventUTCStartTime = Date.UTC(eventStartTime.getFullYear(), eventStartTime.getMonth(), eventStartTime.getDate());\n        eventUTCEndTime = Date.UTC(eventEndTime.getFullYear(), eventEndTime.getMonth(), eventEndTime.getDate() + 1);\n      }\n      if (eventUTCEndTime <= utcStartTime || eventUTCStartTime >= utcEndTime || eventStartTime >= eventEndTime) {\n        continue;\n      }\n      if (event.allDay) {\n        allDayEvents.push({\n          event\n        });\n      } else {\n        normalEventInRange = true;\n        let timeDifferenceStart;\n        if (eventUTCStartTime < utcStartTime) {\n          timeDifferenceStart = 0;\n        } else {\n          timeDifferenceStart = (eventStartTime.getHours() + eventStartTime.getMinutes() / 60) * this.hourSegments;\n        }\n        let timeDifferenceEnd;\n        if (eventUTCEndTime > utcEndTime) {\n          timeDifferenceEnd = (utcEndTime - utcStartTime) / oneHour * this.hourSegments;\n        } else {\n          timeDifferenceEnd = (eventEndTime.getHours() + eventEndTime.getMinutes() / 60) * this.hourSegments;\n        }\n        let startIndex = Math.floor(timeDifferenceStart);\n        let endIndex = Math.ceil(timeDifferenceEnd - eps);\n        let startOffset = 0;\n        let endOffset = 0;\n        if (this.hourParts !== 1) {\n          if (startIndex < rangeStartRowIndex) {\n            startOffset = 0;\n          } else {\n            startOffset = Math.floor((timeDifferenceStart - startIndex) * this.hourParts);\n          }\n          if (endIndex > rangeEndRowIndex) {\n            endOffset = 0;\n          } else {\n            endOffset = Math.floor((endIndex - timeDifferenceEnd) * this.hourParts);\n          }\n        }\n        if (startIndex < rangeStartRowIndex) {\n          startIndex = 0;\n        } else {\n          startIndex -= rangeStartRowIndex;\n        }\n        if (endIndex > rangeEndRowIndex) {\n          endIndex = rangeEndRowIndex;\n        }\n        endIndex -= rangeStartRowIndex;\n        if (startIndex < endIndex) {\n          const displayEvent = {\n            event,\n            startIndex,\n            endIndex,\n            startOffset,\n            endOffset\n          };\n          let eventSet = rows[startIndex].events;\n          if (eventSet) {\n            eventSet.push(displayEvent);\n          } else {\n            eventSet = [];\n            eventSet.push(displayEvent);\n            rows[startIndex].events = eventSet;\n          }\n        }\n      }\n    }\n    if (normalEventInRange) {\n      let orderedEvents = [];\n      for (let hour = 0; hour < this.hourRange; hour += 1) {\n        if (rows[hour].events) {\n          rows[hour].events.sort(DayViewComponent_1.compareEventByStartOffset);\n          orderedEvents = orderedEvents.concat(rows[hour].events);\n        }\n      }\n      if (orderedEvents.length > 0) {\n        this.placeEvents(orderedEvents);\n      }\n    }\n  }\n  refreshView() {\n    this.range = this.getRange(this.calendarService.currentDate);\n    if (this.inited) {\n      const title = this.getTitle();\n      this.onTitleChanged.emit(title);\n    }\n    this.calendarService.populateAdjacentViews(this);\n    this.calendarService.rangeChanged(this);\n  }\n  getTitle() {\n    const startingDate = new Date(this.range.startTime.getTime());\n    startingDate.setHours(12, 0, 0, 0);\n    return this.formatTitle(startingDate);\n  }\n  select(selectedTime, events) {\n    let disabled = false;\n    if (this.markDisabled) {\n      disabled = this.markDisabled(selectedTime);\n    }\n    this.onTimeSelected.emit({\n      selectedTime,\n      events: events.map(e => e.event),\n      disabled\n    });\n  }\n  placeEvents(orderedEvents) {\n    this.calculatePosition(orderedEvents);\n    DayViewComponent_1.calculateWidth(orderedEvents, this.hourRange, this.hourParts);\n  }\n  placeAllDayEvents(orderedEvents) {\n    this.calculatePosition(orderedEvents);\n  }\n  overlap(event1, event2) {\n    let earlyEvent = event1,\n      lateEvent = event2;\n    if (event1.startIndex > event2.startIndex || event1.startIndex === event2.startIndex && event1.startOffset > event2.startOffset) {\n      earlyEvent = event2;\n      lateEvent = event1;\n    }\n    if (earlyEvent.endIndex <= lateEvent.startIndex) {\n      return false;\n    } else {\n      return !(earlyEvent.endIndex - lateEvent.startIndex === 1 && earlyEvent.endOffset + lateEvent.startOffset >= this.hourParts);\n    }\n  }\n  calculatePosition(events) {\n    const len = events.length,\n      isForbidden = new Array(len);\n    let maxColumn = 0,\n      col;\n    for (let i = 0; i < len; i += 1) {\n      for (col = 0; col < maxColumn; col += 1) {\n        isForbidden[col] = false;\n      }\n      for (let j = 0; j < i; j += 1) {\n        if (this.overlap(events[i], events[j])) {\n          isForbidden[events[j].position] = true;\n        }\n      }\n      for (col = 0; col < maxColumn; col += 1) {\n        if (!isForbidden[col]) {\n          break;\n        }\n      }\n      if (col < maxColumn) {\n        events[i].position = col;\n      } else {\n        events[i].position = maxColumn++;\n      }\n    }\n    if (this.dir === 'rtl') {\n      for (let i = 0; i < len; i += 1) {\n        events[i].position = maxColumn - 1 - events[i].position;\n      }\n    }\n  }\n  eventSelected(event) {\n    this.onEventSelected.emit(event);\n  }\n  setScrollPosition(scrollPosition) {\n    this.initScrollPosition = scrollPosition;\n  }\n};\nDayViewComponent.ctorParameters = () => [{\n  type: CalendarService\n}, {\n  type: ElementRef\n}];\n__decorate([ViewChild('daySlider', {\n  static: true\n})], DayViewComponent.prototype, \"slider\", void 0);\n__decorate([HostBinding('class.dayview')], DayViewComponent.prototype, \"class\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"dayviewAllDayEventTemplate\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"dayviewNormalEventTemplate\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"dayviewAllDayEventSectionTemplate\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"dayviewNormalEventSectionTemplate\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"dayviewInactiveAllDayEventSectionTemplate\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"dayviewInactiveNormalEventSectionTemplate\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"formatHourColumn\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"formatDayTitle\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"allDayLabel\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"hourParts\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"eventSource\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"markDisabled\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"locale\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"dateFormatter\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"dir\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"scrollToHour\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"preserveScrollPosition\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"lockSwipeToPrev\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"lockSwipes\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"startHour\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"endHour\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"sliderOptions\", void 0);\n__decorate([Input()], DayViewComponent.prototype, \"hourSegments\", void 0);\n__decorate([Output()], DayViewComponent.prototype, \"onRangeChanged\", void 0);\n__decorate([Output()], DayViewComponent.prototype, \"onEventSelected\", void 0);\n__decorate([Output()], DayViewComponent.prototype, \"onTimeSelected\", void 0);\n__decorate([Output()], DayViewComponent.prototype, \"onTitleChanged\", void 0);\nDayViewComponent = DayViewComponent_1 = __decorate([Component({\n  selector: 'dayview',\n  template: `\n        <ion-slides #daySlider [options]=\"sliderOptions\" [dir]=\"dir\" (ionSlideDidChange)=\"onSlideChanged()\" class=\"slides-container\">\n            <ion-slide class=\"slide-container\">\n                <div class=\"dayview-allday-table\">\n                    <div class=\"dayview-allday-label\">{{allDayLabel}}</div>\n                    <div class=\"dayview-allday-content-wrapper scroll-content\">\n                        <table class=\"table table-bordered dayview-allday-content-table\">\n                            <tbody>\n                            <tr>\n                                <td class=\"calendar-cell\" [ngClass]=\"{'calendar-event-wrap':views[0].allDayEvents.length>0}\"\n                                    [ngStyle]=\"{height: 25*views[0].allDayEvents.length+'px'}\"\n                                    *ngIf=\"0===currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[0].allDayEvents,eventTemplate:dayviewAllDayEventTemplate}\">\n                                    </ng-template>\n                                </td>\n                                <td class=\"calendar-cell\" *ngIf=\"0!==currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewInactiveAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[0].allDayEvents}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <init-position-scroll *ngIf=\"0===currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\" [emitEvent]=\"preserveScrollPosition\"\n                                      (onScroll)=\"setScrollPosition($event)\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[0].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\" tappable (click)=\"select(tm.time, tm.events)\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:dayviewNormalEventTemplate}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n                <init-position-scroll *ngIf=\"0!==currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[0].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewInactiveNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n            </ion-slide>\n            <ion-slide class=\"slide-container\">\n                <div class=\"dayview-allday-table\">\n                    <div class=\"dayview-allday-label\">{{allDayLabel}}</div>\n                    <div class=\"dayview-allday-content-wrapper scroll-content\">\n                        <table class=\"table table-bordered dayview-allday-content-table\">\n                            <tbody>\n                            <tr>\n                                <td class=\"calendar-cell\" [ngClass]=\"{'calendar-event-wrap':views[1].allDayEvents.length>0}\"\n                                    [ngStyle]=\"{height: 25*views[1].allDayEvents.length+'px'}\"\n                                    *ngIf=\"1===currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[1].allDayEvents,eventTemplate:dayviewAllDayEventTemplate}\">\n                                    </ng-template>\n                                </td>\n                                <td class=\"calendar-cell\" *ngIf=\"1!==currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewInactiveAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[1].allDayEvents}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <init-position-scroll *ngIf=\"1===currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\" [emitEvent]=\"preserveScrollPosition\"\n                                      (onScroll)=\"setScrollPosition($event)\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[1].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\" tappable (click)=\"select(tm.time, tm.events)\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:dayviewNormalEventTemplate}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n                <init-position-scroll *ngIf=\"1!==currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[1].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewInactiveNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n            </ion-slide>\n            <ion-slide class=\"slide-container\">\n                <div class=\"dayview-allday-table\">\n                    <div class=\"dayview-allday-label\">{{allDayLabel}}</div>\n                    <div class=\"dayview-allday-content-wrapper scroll-content\">\n                        <table class=\"table table-bordered dayview-allday-content-table\">\n                            <tbody>\n                            <tr>\n                                <td class=\"calendar-cell\" [ngClass]=\"{'calendar-event-wrap':views[2].allDayEvents.length>0}\"\n                                    [ngStyle]=\"{height: 25*views[2].allDayEvents.length+'px'}\"\n                                    *ngIf=\"2===currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[2].allDayEvents,eventTemplate:dayviewAllDayEventTemplate}\">\n                                    </ng-template>\n                                </td>\n                                <td class=\"calendar-cell\" *ngIf=\"2!==currentViewIndex\">\n                                    <ng-template [ngTemplateOutlet]=\"dayviewInactiveAllDayEventSectionTemplate\"\n                                                 [ngTemplateOutletContext]=\"{allDayEvents:views[2].allDayEvents}\">\n                                    </ng-template>\n                                </td>\n                            </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <init-position-scroll *ngIf=\"2===currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\" [emitEvent]=\"preserveScrollPosition\"\n                                      (onScroll)=\"setScrollPosition($event)\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[2].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\" tappable (click)=\"select(tm.time, tm.events)\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts, eventTemplate:dayviewNormalEventTemplate}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n                <init-position-scroll *ngIf=\"2!==currentViewIndex\" class=\"dayview-normal-event-container\"\n                                      [initPosition]=\"initScrollPosition\">\n                    <table class=\"table table-bordered table-fixed dayview-normal-event-table\">\n                        <tbody>\n                        <tr *ngFor=\"let tm of views[2].rows; let i = index\">\n                            <td class=\"calendar-hour-column text-center\">\n                                {{hourColumnLabels[i]}}\n                            </td>\n                            <td class=\"calendar-cell\">\n                                <ng-template [ngTemplateOutlet]=\"dayviewInactiveNormalEventSectionTemplate\"\n                                             [ngTemplateOutletContext]=\"{tm:tm, hourParts: hourParts}\">\n                                </ng-template>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </init-position-scroll>\n            </ion-slide>\n        </ion-slides>\n    `,\n  encapsulation: ViewEncapsulation.None,\n  styles: [`\n        .table-fixed {\n            table-layout: fixed;\n        }\n\n        .table {\n            width: 100%;\n            max-width: 100%;\n            background-color: transparent;\n        }\n\n        .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td,\n        .table > tbody > tr > td, .table > tfoot > tr > td {\n            padding: 8px;\n            line-height: 20px;\n            vertical-align: top;\n        }\n\n        .table > thead > tr > th {\n            vertical-align: bottom;\n            border-bottom: 2px solid #ddd;\n        }\n\n        .table > thead:first-child > tr:first-child > th, .table > thead:first-child > tr:first-child > td {\n            border-top: 0\n        }\n\n        .table > tbody + tbody {\n            border-top: 2px solid #ddd;\n        }\n\n        .table-bordered {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > th,\n        .table-bordered > thead > tr > td, .table-bordered > tbody > tr > td, .table-bordered > tfoot > tr > td {\n            border: 1px solid #ddd;\n        }\n\n        .table-bordered > thead > tr > th, .table-bordered > thead > tr > td {\n            border-bottom-width: 2px;\n        }\n\n        .table-striped > tbody > tr:nth-child(odd) > td, .table-striped > tbody > tr:nth-child(odd) > th {\n            background-color: #f9f9f9\n        }\n\n        .calendar-hour-column {\n            width: 50px;\n            white-space: nowrap;\n        }\n\n        .calendar-event-wrap {\n            position: relative;\n            width: 100%;\n            height: 100%;\n        }\n\n        .calendar-event {\n            position: absolute;\n            padding: 2px;\n            cursor: pointer;\n            z-index: 10000;\n        }\n\n        .slides-container {\n            height: 100%;\n        }\n\n        .slide-container {\n            display: block;\n        }\n\n        .calendar-cell {\n            padding: 0 !important;\n            height: 37px;\n        }\n\n        .dayview-allday-label {\n            float: left;\n            height: 100%;\n            line-height: 50px;\n            text-align: center;\n            width: 50px;\n            border-left: 1px solid #ddd;\n        }\n\n        [dir=\"rtl\"] .dayview-allday-label {\n            border-right: 1px solid #ddd;\n            float: right;\n        }\n\n        .dayview-allday-content-wrapper {\n            margin-left: 50px;\n            overflow: hidden;\n            height: 51px;\n        }\n\n        [dir=\"rtl\"] .dayview-allday-content-wrapper {\n            margin-left: 0;\n            margin-right: 50px;\n        }\n\n        .dayview-allday-content-table {\n            min-height: 50px;\n        }\n\n        .dayview-allday-content-table td {\n            border-left: 1px solid #ddd;\n            border-right: 1px solid #ddd;\n        }\n\n        .dayview-allday-table {\n            height: 50px;\n            position: relative;\n            border-bottom: 1px solid #ddd;\n            font-size: 14px;\n        }\n\n        .dayview-normal-event-container {\n            margin-top: 50px;\n            overflow: hidden;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n            position: absolute;\n            font-size: 14px;\n        }\n\n        .scroll-content {\n            overflow-y: auto;\n            overflow-x: hidden;\n        }\n\n        ::-webkit-scrollbar,\n        *::-webkit-scrollbar {\n            display: none;\n        }\n\n        .table > tbody > tr > td.calendar-hour-column {\n            padding-left: 0;\n            padding-right: 0;\n            vertical-align: middle;\n        }\n\n        @media (max-width: 750px) {\n            .dayview-allday-label, .calendar-hour-column {\n                width: 31px;\n                font-size: 12px;\n            }\n\n            .dayview-allday-label {\n                padding-top: 4px;\n            }\n\n            .table > tbody > tr > td.calendar-hour-column {\n                padding-left: 0;\n                padding-right: 0;\n                vertical-align: middle;\n                line-height: 12px;\n            }\n\n            .dayview-allday-label {\n                line-height: 20px;\n            }\n\n            .dayview-allday-content-wrapper {\n                margin-left: 31px;\n            }\n\n            [dir=\"rtl\"] .dayview-allday-content-wrapper {\n                margin-left: 0;\n                margin-right: 31px;\n            }\n        }\n    `]\n})], DayViewComponent);\nvar Step = /*#__PURE__*/function (Step) {\n  Step[Step[\"QuarterHour\"] = 15] = \"QuarterHour\";\n  Step[Step[\"HalfHour\"] = 30] = \"HalfHour\";\n  Step[Step[\"Hour\"] = 60] = \"Hour\";\n  return Step;\n}(Step || {});\nlet CalendarComponent = /*#__PURE__*/(() => {\n  let CalendarComponent = class CalendarComponent {\n    constructor(calendarService, appLocale) {\n      this.calendarService = calendarService;\n      this.appLocale = appLocale;\n      this.eventSource = [];\n      this.calendarMode = 'month';\n      this.formatDay = 'd';\n      this.formatDayHeader = 'EEE';\n      this.formatDayTitle = 'MMMM dd, yyyy';\n      this.formatWeekTitle = 'MMMM yyyy, \\'Week\\' w';\n      this.formatMonthTitle = 'MMMM yyyy';\n      this.formatWeekViewDayHeader = 'EEE d';\n      this.formatHourColumn = 'ha';\n      this.showEventDetail = true;\n      this.startingDayMonth = 0;\n      this.startingDayWeek = 0;\n      this.allDayLabel = 'all day';\n      this.noEventsLabel = 'No Events';\n      this.queryMode = 'local';\n      this.step = Step.Hour;\n      this.timeInterval = 60;\n      this.autoSelect = true;\n      this.dir = \"\";\n      this.scrollToHour = 0;\n      this.preserveScrollPosition = false;\n      this.lockSwipeToPrev = false;\n      this.lockSwipes = false;\n      this.locale = \"\";\n      this.startHour = 0;\n      this.endHour = 24;\n      this.onCurrentDateChanged = new EventEmitter();\n      this.onRangeChanged = new EventEmitter();\n      this.onEventSelected = new EventEmitter();\n      this.onTimeSelected = new EventEmitter();\n      this.onTitleChanged = new EventEmitter();\n      this.hourParts = 1;\n      this.hourSegments = 1;\n      this.locale = appLocale;\n    }\n    get currentDate() {\n      return this._currentDate;\n    }\n    set currentDate(val) {\n      if (!val) {\n        val = new Date();\n      }\n      this._currentDate = val;\n      this.calendarService.setCurrentDate(val, true);\n      this.onCurrentDateChanged.emit(this._currentDate);\n    }\n    ngOnInit() {\n      if (this.autoSelect) {\n        if (this.autoSelect.toString() === 'false') {\n          this.autoSelect = false;\n        } else {\n          this.autoSelect = true;\n        }\n      }\n      this.hourSegments = 60 / this.timeInterval;\n      this.hourParts = 60 / this.step;\n      if (this.hourParts <= this.hourSegments) {\n        this.hourParts = 1;\n      } else {\n        this.hourParts = this.hourParts / this.hourSegments;\n      }\n      this.startHour = parseInt(this.startHour.toString());\n      this.endHour = parseInt(this.endHour.toString());\n      this.calendarService.queryMode = this.queryMode;\n      this.currentDateChangedFromChildrenSubscription = this.calendarService.currentDateChangedFromChildren$.subscribe(currentDate => {\n        this._currentDate = currentDate;\n        this.onCurrentDateChanged.emit(currentDate);\n      });\n    }\n    ngOnDestroy() {\n      if (this.currentDateChangedFromChildrenSubscription) {\n        this.currentDateChangedFromChildrenSubscription.unsubscribe();\n        this.currentDateChangedFromChildrenSubscription = null;\n      }\n    }\n    rangeChanged(range) {\n      this.onRangeChanged.emit(range);\n    }\n    eventSelected(event) {\n      this.onEventSelected.emit(event);\n    }\n    timeSelected(timeSelected) {\n      this.onTimeSelected.emit(timeSelected);\n    }\n    titleChanged(title) {\n      this.onTitleChanged.emit(title);\n    }\n    loadEvents() {\n      this.calendarService.loadEvents();\n    }\n    slideNext() {\n      this.calendarService.slide(1);\n    }\n    slidePrev() {\n      this.calendarService.slide(-1);\n    }\n    update() {\n      this.calendarService.update();\n    }\n  };\n  __decorate([Input()], CalendarComponent.prototype, \"currentDate\", null);\n  __decorate([Input()], CalendarComponent.prototype, \"eventSource\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"calendarMode\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"formatDay\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"formatDayHeader\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"formatDayTitle\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"formatWeekTitle\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"formatMonthTitle\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"formatWeekViewDayHeader\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"formatHourColumn\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"showEventDetail\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"startingDayMonth\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"startingDayWeek\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"allDayLabel\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"noEventsLabel\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"queryMode\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"step\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"timeInterval\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"autoSelect\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"markDisabled\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"monthviewDisplayEventTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"monthviewInactiveDisplayEventTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"monthviewEventDetailTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"weekviewHeaderTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"weekviewAllDayEventTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"weekviewNormalEventTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"dayviewAllDayEventTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"dayviewNormalEventTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"weekviewAllDayEventSectionTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"weekviewNormalEventSectionTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"dayviewAllDayEventSectionTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"dayviewNormalEventSectionTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"weekviewInactiveAllDayEventSectionTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"weekviewInactiveNormalEventSectionTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"dayviewInactiveAllDayEventSectionTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"dayviewInactiveNormalEventSectionTemplate\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"dateFormatter\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"dir\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"scrollToHour\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"preserveScrollPosition\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"lockSwipeToPrev\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"lockSwipes\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"locale\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"startHour\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"endHour\", void 0);\n  __decorate([Input()], CalendarComponent.prototype, \"sliderOptions\", void 0);\n  __decorate([Output()], CalendarComponent.prototype, \"onCurrentDateChanged\", void 0);\n  __decorate([Output()], CalendarComponent.prototype, \"onRangeChanged\", void 0);\n  __decorate([Output()], CalendarComponent.prototype, \"onEventSelected\", void 0);\n  __decorate([Output()], CalendarComponent.prototype, \"onTimeSelected\", void 0);\n  __decorate([Output()], CalendarComponent.prototype, \"onTitleChanged\", void 0);\n  CalendarComponent = __decorate([Component({\n    selector: 'calendar',\n    template: `\n        <ng-template #monthviewDefaultDisplayEventTemplate let-view=\"view\" let-row=\"row\" let-col=\"col\">\n            {{view.dates[row*7+col].label}}\n        </ng-template>\n        <ng-template #monthviewDefaultEventDetailTemplate let-showEventDetail=\"showEventDetail\" let-selectedDate=\"selectedDate\" let-noEventsLabel=\"noEventsLabel\">\n            <ion-list class=\"event-detail-container\" has-bouncing=\"false\" *ngIf=\"showEventDetail\" overflow-scroll=\"false\">\n                <ion-item *ngFor=\"let event of selectedDate?.events\" (click)=\"eventSelected(event)\">\n                        <span *ngIf=\"!event.allDay\" class=\"monthview-eventdetail-timecolumn\">{{event.startTime|date: 'HH:mm'}}\n                            -\n                            {{event.endTime|date: 'HH:mm'}}\n                        </span>\n                    <span *ngIf=\"event.allDay\" class=\"monthview-eventdetail-timecolumn\">{{allDayLabel}}</span>\n                    <span class=\"event-detail\">  |  {{event.title}}</span>\n                </ion-item>\n                <ion-item *ngIf=\"selectedDate?.events.length==0\">\n                    <div class=\"no-events-label\">{{noEventsLabel}}</div>\n                </ion-item>\n            </ion-list>\n        </ng-template>\n        <ng-template #defaultWeekviewHeaderTemplate let-viewDate=\"viewDate\">\n            {{ viewDate.dayHeader }}\n        </ng-template>\n        <ng-template #defaultAllDayEventTemplate let-displayEvent=\"displayEvent\">\n            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n        </ng-template>\n        <ng-template #defaultNormalEventTemplate let-displayEvent=\"displayEvent\">\n            <div class=\"calendar-event-inner\">{{displayEvent.event.title}}</div>\n        </ng-template>\n        <ng-template #defaultWeekViewAllDayEventSectionTemplate let-day=\"day\" let-eventTemplate=\"eventTemplate\">\n            <div [ngClass]=\"{'calendar-event-wrap': day.events}\" *ngIf=\"day.events\"\n                 [ngStyle]=\"{height: 25*day.events.length+'px'}\">\n                <div *ngFor=\"let displayEvent of day.events\" class=\"calendar-event\" tappable\n                     (click)=\"eventSelected(displayEvent.event)\"\n                     [ngStyle]=\"{top: 25*displayEvent.position+'px', width: 100*(displayEvent.endIndex-displayEvent.startIndex)+'%', height: '25px'}\">\n                    <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                                 [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                    </ng-template>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #defaultDayViewAllDayEventSectionTemplate let-allDayEvents=\"allDayEvents\" let-eventTemplate=\"eventTemplate\">\n            <div *ngFor=\"let displayEvent of allDayEvents; let eventIndex=index\"\n                 class=\"calendar-event\" tappable\n                 (click)=\"eventSelected(displayEvent.event)\"\n                 [ngStyle]=\"{top: 25*eventIndex+'px',width: '100%',height:'25px'}\">\n                <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                             [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                </ng-template>\n            </div>\n        </ng-template>\n        <ng-template #defaultNormalEventSectionTemplate let-tm=\"tm\" let-hourParts=\"hourParts\" let-eventTemplate=\"eventTemplate\">\n            <div [ngClass]=\"{'calendar-event-wrap': tm.events}\" *ngIf=\"tm.events\">\n                <div *ngFor=\"let displayEvent of tm.events\" class=\"calendar-event\" tappable\n                     (click)=\"eventSelected(displayEvent.event)\"\n                     [ngStyle]=\"{top: (37*displayEvent.startOffset/hourParts)+'px',left: 100/displayEvent.overlapNumber*displayEvent.position+'%', width: 100/displayEvent.overlapNumber+'%', height: 37*(displayEvent.endIndex -displayEvent.startIndex - (displayEvent.endOffset + displayEvent.startOffset)/hourParts)+'px'}\">\n                    <ng-template [ngTemplateOutlet]=\"eventTemplate\"\n                                 [ngTemplateOutletContext]=\"{displayEvent:displayEvent}\">\n                    </ng-template>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #defaultInactiveAllDayEventSectionTemplate>\n        </ng-template>\n        <ng-template #defaultInactiveNormalEventSectionTemplate>\n        </ng-template>\n\n        <div [ngSwitch]=\"calendarMode\" class=\"{{calendarMode}}view-container\">\n            <monthview *ngSwitchCase=\"'month'\"\n                [formatDay]=\"formatDay\"\n                [formatDayHeader]=\"formatDayHeader\"\n                [formatMonthTitle]=\"formatMonthTitle\"\n                [startingDayMonth]=\"startingDayMonth\"\n                [showEventDetail]=\"showEventDetail\"\n                [noEventsLabel]=\"noEventsLabel\"\n                [autoSelect]=\"autoSelect\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [monthviewDisplayEventTemplate]=\"monthviewDisplayEventTemplate||monthviewDefaultDisplayEventTemplate\"\n                [monthviewInactiveDisplayEventTemplate]=\"monthviewInactiveDisplayEventTemplate||monthviewDefaultDisplayEventTemplate\"\n                [monthviewEventDetailTemplate]=\"monthviewEventDetailTemplate||monthviewDefaultEventDetailTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [sliderOptions]=\"sliderOptions\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </monthview>\n            <weekview *ngSwitchCase=\"'week'\"\n                [formatWeekTitle]=\"formatWeekTitle\"\n                [formatWeekViewDayHeader]=\"formatWeekViewDayHeader\"\n                [formatHourColumn]=\"formatHourColumn\"\n                [startingDayWeek]=\"startingDayWeek\"\n                [allDayLabel]=\"allDayLabel\"\n                [hourParts]=\"hourParts\"\n                [autoSelect]=\"autoSelect\"\n                [hourSegments]=\"hourSegments\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [weekviewHeaderTemplate]=\"weekviewHeaderTemplate||defaultWeekviewHeaderTemplate\"\n                [weekviewAllDayEventTemplate]=\"weekviewAllDayEventTemplate||defaultAllDayEventTemplate\"\n                [weekviewNormalEventTemplate]=\"weekviewNormalEventTemplate||defaultNormalEventTemplate\"\n                [weekviewAllDayEventSectionTemplate]=\"weekviewAllDayEventSectionTemplate||defaultWeekViewAllDayEventSectionTemplate\"\n                [weekviewNormalEventSectionTemplate]=\"weekviewNormalEventSectionTemplate||defaultNormalEventSectionTemplate\"\n                [weekviewInactiveAllDayEventSectionTemplate]=\"weekviewInactiveAllDayEventSectionTemplate||defaultInactiveAllDayEventSectionTemplate\"\n                [weekviewInactiveNormalEventSectionTemplate]=\"weekviewInactiveNormalEventSectionTemplate||defaultInactiveNormalEventSectionTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [scrollToHour]=\"scrollToHour\"\n                [preserveScrollPosition]=\"preserveScrollPosition\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [startHour]=\"startHour\"\n                [endHour]=\"endHour\"\n                [sliderOptions]=\"sliderOptions\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </weekview>\n            <dayview *ngSwitchCase=\"'day'\"\n                [formatDayTitle]=\"formatDayTitle\"\n                [formatHourColumn]=\"formatHourColumn\"\n                [allDayLabel]=\"allDayLabel\"\n                [hourParts]=\"hourParts\"\n                [hourSegments]=\"hourSegments\"\n                [eventSource]=\"eventSource\"\n                [markDisabled]=\"markDisabled\"\n                [dayviewAllDayEventTemplate]=\"dayviewAllDayEventTemplate||defaultAllDayEventTemplate\"\n                [dayviewNormalEventTemplate]=\"dayviewNormalEventTemplate||defaultNormalEventTemplate\"\n                [dayviewAllDayEventSectionTemplate]=\"dayviewAllDayEventSectionTemplate||defaultDayViewAllDayEventSectionTemplate\"\n                [dayviewNormalEventSectionTemplate]=\"dayviewNormalEventSectionTemplate||defaultNormalEventSectionTemplate\"\n                [dayviewInactiveAllDayEventSectionTemplate]=\"dayviewInactiveAllDayEventSectionTemplate||defaultInactiveAllDayEventSectionTemplate\"\n                [dayviewInactiveNormalEventSectionTemplate]=\"dayviewInactiveNormalEventSectionTemplate||defaultInactiveNormalEventSectionTemplate\"\n                [locale]=\"locale\"\n                [dateFormatter]=\"dateFormatter\"\n                [dir]=\"dir\"\n                [scrollToHour]=\"scrollToHour\"\n                [preserveScrollPosition]=\"preserveScrollPosition\"\n                [lockSwipeToPrev]=\"lockSwipeToPrev\"\n                [lockSwipes]=\"lockSwipes\"\n                [startHour]=\"startHour\"\n                [endHour]=\"endHour\"\n                [sliderOptions]=\"sliderOptions\"\n                (onRangeChanged)=\"rangeChanged($event)\"\n                (onEventSelected)=\"eventSelected($event)\"\n                (onTimeSelected)=\"timeSelected($event)\"\n                (onTitleChanged)=\"titleChanged($event)\">\n            </dayview>\n        </div>\n    `,\n    providers: [CalendarService],\n    styles: [`\n        :host > div { height: 100%; }\n\n        .event-detail-container {\n          border-top: 2px darkgrey solid;\n        }\n\n        .no-events-label {\n          font-weight: bold;\n          color: darkgrey;\n          text-align: center;\n        }\n\n        .event-detail {\n          cursor: pointer;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n        }\n\n        .monthview-eventdetail-timecolumn {\n          width: 110px;\n          overflow: hidden;\n        }\n\n        .calendar-event-inner {\n          overflow: hidden;\n          background-color: #3a87ad;\n          color: white;\n          height: 100%;\n          width: 100%;\n          padding: 2px;\n          line-height: 15px;\n          text-align: initial;\n        }\n\n        @media (max-width: 750px) {\n          .calendar-event-inner {\n            font-size: 12px;\n          }\n        }\n    `]\n  }), __param(1, Inject(LOCALE_ID))], CalendarComponent);\n  return CalendarComponent;\n})();\nlet initPositionScrollComponent = /*#__PURE__*/(() => {\n  let initPositionScrollComponent = class initPositionScrollComponent {\n    constructor(el) {\n      this.onScroll = new EventEmitter();\n      this.listenerAttached = false;\n      this.element = el;\n    }\n    ngOnChanges(changes) {\n      let initPosition = changes['initPosition'];\n      if (initPosition && initPosition.currentValue !== undefined && this.scrollContent) {\n        const me = this;\n        setTimeout(function () {\n          me.scrollContent.scrollTop = initPosition.currentValue;\n        }, 0);\n      }\n    }\n    ngAfterViewInit() {\n      const scrollContent = this.scrollContent = this.element.nativeElement.querySelector('.scroll-content');\n      if (this.initPosition !== undefined) {\n        scrollContent.scrollTop = this.initPosition;\n      }\n      if (this.emitEvent && !this.listenerAttached) {\n        let onScroll = this.onScroll;\n        this.handler = function () {\n          onScroll.emit(scrollContent.scrollTop);\n        };\n        this.listenerAttached = true;\n        scrollContent.addEventListener('scroll', this.handler);\n      }\n    }\n    ngOnDestroy() {\n      if (this.listenerAttached) {\n        this.scrollContent.removeEventListener('scroll', this.handler);\n      }\n    }\n  };\n  __decorate([Input()], initPositionScrollComponent.prototype, \"initPosition\", void 0);\n  __decorate([Input()], initPositionScrollComponent.prototype, \"emitEvent\", void 0);\n  __decorate([Output()], initPositionScrollComponent.prototype, \"onScroll\", void 0);\n  initPositionScrollComponent = __decorate([Component({\n    selector: 'init-position-scroll',\n    template: `\n        <div class=\"scroll-content\" style=\"height:100%\">\n            <ng-content></ng-content>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    styles: [`\n        .scroll-content {\n            overflow-y: auto;\n            overflow-x: hidden;\n        }        \n    `]\n  })], initPositionScrollComponent);\n  return initPositionScrollComponent;\n})();\nlet NgCalendarModule = /*#__PURE__*/(() => {\n  let NgCalendarModule = class NgCalendarModule {};\n  NgCalendarModule = __decorate([NgModule({\n    declarations: [MonthViewComponent, WeekViewComponent, DayViewComponent, CalendarComponent, initPositionScrollComponent],\n    imports: [IonicModule, CommonModule],\n    exports: [CalendarComponent]\n  })], NgCalendarModule);\n\n  /**\n   * Generated bundle index. Do not edit.\n   */\n  return NgCalendarModule;\n})();\nexport { CalendarComponent, NgCalendarModule, MonthViewComponent as ɵa, CalendarService as ɵb, WeekViewComponent as ɵc, DayViewComponent as ɵd, initPositionScrollComponent as ɵe };\n//# sourceMappingURL=ionic2-calendar.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}