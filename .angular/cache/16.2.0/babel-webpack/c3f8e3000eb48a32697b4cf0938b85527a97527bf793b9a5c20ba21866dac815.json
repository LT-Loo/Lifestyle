{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/lerth/Documents/Lifestyle/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EditGoalPage } from '../edit-goal/edit-goal.page';\nimport { AddGoalPage } from '../add-goal/add-goal.page';\nimport { RecordPage } from '../record/record.page';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"../storage.service\";\nimport * as i3 from \"@angular/common\";\nfunction GoalPage_ion_item_sliding_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item-sliding\", 9)(1, \"ion-item\", 10);\n    i0.ɵɵlistener(\"click\", function GoalPage_ion_item_sliding_12_Template_ion_item_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.showGoal(i_r2));\n    });\n    i0.ɵɵelementStart(2, \"p\")(3, \"ion-text\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"br\");\n    i0.ɵɵelementStart(7, \"ion-text\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"ion-item-options\", 12)(10, \"ion-item-option\", 13);\n    i0.ɵɵlistener(\"click\", function GoalPage_ion_item_sliding_12_Template_ion_item_option_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deleteGoal(i_r2));\n    });\n    i0.ɵɵelement(11, \"ion-icon\", 14);\n    i0.ɵɵtext(12, \" DELETE \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"ion-item-options\", 15)(14, \"ion-item-option\", 16);\n    i0.ɵɵlistener(\"click\", function GoalPage_ion_item_sliding_12_Template_ion_item_option_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.goalDone(i_r2));\n    });\n    i0.ɵɵelement(15, \"ion-icon\", 17);\n    i0.ɵɵtext(16, \" DONE \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const goal_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Before \", i0.ɵɵpipeBind2(5, 2, goal_r1.deadline, \"dd MMM\"), \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(goal_r1.goal);\n  }\n}\nexport let GoalPage = /*#__PURE__*/(() => {\n  var _class;\n  class GoalPage {\n    constructor(modalController, storageServe) {\n      this.modalController = modalController;\n      this.storageServe = storageServe;\n      this.goals = [];\n      /*goal: string;\r\n      desc: string;\r\n      deadline: string;*/\n      this.goalRecord = []; // Store accomplished goals\n    }\n    // Get goals from storage and sort them according to deadline in ascending order\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.goals = yield _this.storageServe.accessStorage(\"goals\");\n        _this.goals = _this.goals.sort((a, b) => {\n          if (new Date(b.deadline) < new Date(a.deadline)) return 1;\n          if (new Date(b.deadline) > new Date(a.deadline)) return -1;\n          return 0;\n        });\n      })();\n    }\n    // Modal page to add new goal\n    addGoal() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const modal = yield _this2.modalController.create({\n          component: AddGoalPage\n        });\n        modal.onDidDismiss().then(results => {\n          /*this.goal = results.data.goal;\r\n          this.desc = results.data.desc;\r\n          this.deadline = results.data.deadline;*/\n          let newGoal = {\n            goal: results.data.goal,\n            desc: results.data.desc,\n            deadline: results.data.deadline\n          };\n          _this2.goals.push(newGoal); // Add new goal into goal list and sort them in order\n          _this2.goals = _this2.goals.sort((a, b) => {\n            if (new Date(b.deadline) < new Date(a.deadline)) return 1;\n            if (new Date(b.deadline) > new Date(a.deadline)) return -1;\n            return 0;\n          });\n          _this2.storageServe.saveData(\"goals\", _this2.goals); // Update storage\n        });\n\n        return modal.present();\n      })();\n    }\n    // Modal goal to edit and show selected goal\n    showGoal(i) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const modal = yield _this3.modalController.create({\n          component: EditGoalPage,\n          componentProps: {\n            goal: _this3.goals[i].goal,\n            desc: _this3.goals[i].desc,\n            deadline: _this3.goals[i].deadline\n          }\n        });\n        modal.onDidDismiss().then(results => {\n          /* this.goal = results.data.goal;\r\n           this.desc = results.data.desc;\r\n           this.deadline = results.data.deadline;*/\n          let editedGoal = {\n            goal: results.data.goal,\n            desc: results.data.desc,\n            deadline: results.data.deadline\n          };\n          _this3.goals[i] = editedGoal; // Update goal list with edited goal\n          _this3.storageServe.saveData(\"goals\", _this3.goals); // Update goals in storage\n        });\n\n        return modal.present();\n      })();\n    }\n    // Modal page to show accomplished goals' list\n    goalHistory() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        const modal = yield _this4.modalController.create({\n          component: RecordPage,\n          componentProps: {\n            record: _this4.goalRecord\n          }\n        });\n        modal.onDidDismiss();\n        return modal.present();\n      })();\n    }\n    // Delete goal\n    deleteGoal(i) {\n      if (confirm(\"Delete this goal?\")) {\n        this.goals.splice(i, 1);\n        this.storageServe.saveData(\"goals\", this.goals); // Update goal list in storage\n      }\n    }\n    // Add completed goal to goalRecord and delete goal\n    goalDone(i) {\n      let doneDate = new Date();\n      let message;\n      // Determine message shown when goal is completed depends on date\n      if (doneDate > new Date(this.goals[i].deadline)) {\n        message = \"Congratulations! You've accomplished your goal!\\nTry to complete your goal before the deadline next time!\";\n      } else {\n        message = \"Congratulations! You've accomplished your goal before the deadline!\\nKeep it up!\";\n      }\n      // Show message and ask for confirmation\n      if (confirm(message)) {\n        let doneGoal = {\n          goal: this.goals[i].goal,\n          desc: this.goals[i].desc,\n          finishDate: doneDate.toISOString()\n        };\n        this.goalRecord.push(doneGoal);\n        this.goals.splice(i, 1);\n        this.storageServe.saveData(\"achieved\", this.goalRecord); // Update achieved goals in storage\n        this.storageServe.saveData(\"goals\", this.goals); // Update goal list in storage\n      }\n    }\n  }\n  _class = GoalPage;\n  _class.ɵfac = function GoalPage_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i2.StorageService));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-goal\"]],\n    decls: 16,\n    vars: 3,\n    consts: [[3, \"translucent\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"expand\", \"block\", \"size\", \"medium\", \"fill\", \"outline\", 2, \"padding-top\", \"5px\", 3, \"click\"], [\"style\", \"margin-bottom: 5px\", 4, \"ngFor\", \"ngForOf\"], [\"vertical\", \"bottom\", \"horizontal\", \"end\", \"slot\", \"fixed\"], [\"size\", \"small\", 3, \"click\"], [\"name\", \"add\"], [2, \"margin-bottom\", \"5px\"], [3, \"click\"], [\"color\", \"grey\", 2, \"font-size\", \"small\"], [\"side\", \"end\"], [2, \"background-color\", \"lightslategrey\", 3, \"click\"], [\"size\", \"small\", \"slot\", \"top\", \"name\", \"trash-outline\"], [\"side\", \"start\"], [\"color\", \"success\", 3, \"click\"], [\"size\", \"small\", \"slot\", \"top\", \"name\", \"checkmark-done-circle-outline\"]],\n    template: function GoalPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-title\");\n        i0.ɵɵtext(3, \"Goal\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"ion-content\", 1)(5, \"ion-header\", 2)(6, \"ion-toolbar\")(7, \"ion-title\", 3);\n        i0.ɵɵtext(8, \"Goal\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"ion--list\")(10, \"ion-button\", 4);\n        i0.ɵɵlistener(\"click\", function GoalPage_Template_ion_button_click_10_listener() {\n          return ctx.goalHistory();\n        });\n        i0.ɵɵtext(11, \" GOAL CHART \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, GoalPage_ion_item_sliding_12_Template, 17, 5, \"ion-item-sliding\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"ion-fab\", 6)(14, \"ion-fab-button\", 7);\n        i0.ɵɵlistener(\"click\", function GoalPage_Template_ion_fab_button_click_14_listener() {\n          return ctx.addGoal();\n        });\n        i0.ɵɵelement(15, \"ion-icon\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"fullscreen\", true);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.goals);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.DatePipe]\n  });\n  return GoalPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}