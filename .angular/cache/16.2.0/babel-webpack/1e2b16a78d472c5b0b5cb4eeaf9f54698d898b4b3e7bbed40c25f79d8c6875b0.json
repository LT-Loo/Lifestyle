{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nconst _c0 = [\"map\"];\nexport let MappingPage = /*#__PURE__*/(() => {\n  var _class;\n  class MappingPage {\n    constructor(navParams, modalController) {\n      this.navParams = navParams;\n      this.modalController = modalController;\n      this.place = '';\n      this.lat = null;\n      this.long = null;\n    }\n    ngOnInit() {\n      // Get data of location\n      this.place = this.navParams.get('place');\n      this.lat = this.navParams.get('lat');\n      this.long = this.navParams.get('long');\n      // Assign data to map\n      let mapOptions = {\n        center: {\n          lat: this.lat,\n          lng: this.long\n        },\n        zoom: 15,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      };\n      this.map = new google.maps.Map(this.mapElement.nativeElement, mapOptions); // Show map\n      // For new diary, detect user's current location\n      if (this.lat == null || this.long == null) {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(position => {\n            let pos = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            };\n            this.lat = pos.lat;\n            this.long = pos.lng;\n            this.map.setCenter(pos);\n          });\n        } else {\n          alert(\"Geolocation not supported.\");\n        }\n        // Show pin and info window when a location is selected on map\n        let infoWindow = new google.maps.InfoWindow();\n        let marker;\n        this.map.addListener(\"click\", mapsMouseEvent => {\n          // Remove previous pin and info window whenever a new location is picked\n          infoWindow.close();\n          if (marker) {\n            marker.setMap(null);\n          }\n          infoWindow = new google.maps.InfoWindow({\n            position: mapsMouseEvent.latLng\n          });\n          marker = new google.maps.Marker({\n            map: this.map,\n            animation: google.maps.Animation.DROP,\n            position: mapsMouseEvent.latLng\n          });\n          infoWindow.setContent(\n          // Show coordinates or place's name in info window\n          JSON.stringify(mapsMouseEvent.latLng.toJSON(), null, 2));\n          this.lat = marker.getPosition().lat(); // Save coordinates of location selected\n          this.long = marker.getPosition().lng();\n          infoWindow.open(this.map, marker); // Display info window\n        });\n      } else {\n        // For show/read diary, show pin on location saved\n        let marker = new google.maps.Marker({\n          map: this.map,\n          animation: google.maps.Animation.DROP,\n          position: this.map.getCenter()\n        });\n        let infoWindow = new google.maps.InfoWindow({\n          content: '<h4>' + this.place + '<h/4>'\n        });\n        google.maps.event.addListener(marker, 'click', () => {\n          infoWindow.open(this.map, marker);\n        });\n      }\n    }\n    closeMap() {\n      this.modalController.dismiss();\n    } // Close map\n    // Save location and map (Mostly for new diary)\n    saveMap() {\n      this.modalController.dismiss({\n        place: this.place,\n        lat: this.lat,\n        long: this.long\n      });\n    }\n  }\n  _class = MappingPage;\n  _class.ɵfac = function MappingPage_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.NavParams), i0.ɵɵdirectiveInject(i1.ModalController));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-mapping\"]],\n    viewQuery: function MappingPage_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapElement = _t.first);\n      }\n    },\n    decls: 11,\n    vars: 0,\n    consts: [[\"slot\", \"start\", \"fill\", \"clear\", 3, \"click\"], [\"name\", \"close-outline\"], [2, \"text-align\", \"center\"], [\"slot\", \"end\", \"fill\", \"clear\", 3, \"click\"], [\"name\", \"checkmark\"], [\"id\", \"map\"], [\"map\", \"\"]],\n    template: function MappingPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function MappingPage_Template_ion_button_click_2_listener() {\n          return ctx.closeMap();\n        });\n        i0.ɵɵelement(3, \"ion-icon\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\", 2);\n        i0.ɵɵtext(5, \"Map\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-button\", 3);\n        i0.ɵɵlistener(\"click\", function MappingPage_Template_ion_button_click_6_listener() {\n          return ctx.saveMap();\n        });\n        i0.ɵɵelement(7, \"ion-icon\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"ion-content\");\n        i0.ɵɵelement(9, \"div\", 5, 6);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".scroll[_ngcontent-%COMP%]{height:100%}#map[_ngcontent-%COMP%]{width:100%;height:100%}\"]\n  });\n  return MappingPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}